
= SDL_AddEventWatch =
Use this function to add a callback to be triggered when an event is added to the event queue.


== Syntax ==
<syntaxhighlight lang='c++'>
void SDL_AddEventWatch(SDL_EventFilter filter,
                       void*           userdata)
</syntaxhighlight>

== Function Parameters ==
{|
|'''filter'''
|the function to call when an event happens; see [[#Remarks|Remarks]] for details
|-
|'''userdata'''
|a pointer that is passed to '''filter'''
|}

== Code Examples ==
<syntaxhighlight lang='c++'>
You can add your code example here
</syntaxhighlight>

== Remarks ==
<<Include(SDL_SetEventFilter, , , from="Start Include here.", to="##End Include here")>>
: where <code>YourEventFilter</code> is the name of your function and its parameters are:
 ||<code>userdata</code>||what was passed as '''userdata''' to [[SDL_AddEventWatch]]()||
 ||<code>event</code>||the event that triggered the callback||

: '''filter''' will be called when an event happens, and its return value is ignored.

/!\ WARNING: Be very careful of what you do in the event filter function, as it may run in a different thread!

If the quit event is generated by a signal (e.g. SIGINT), it will bypass the internal queue and be delivered to the watch callback immediately, and arrive at the next event poll.

Note: the callback is called for events posted by the user through [[SDL_PushEvent]](), but not for disabled events, nor for events by a filter callback set with [[SDL_SetEventFilter]](), nor for events posted by the user through [[SDL_PeepEvents]]().

== Related Functions ==
:[[SDL_DelEventWatch]]
:[[SDL_SetEventFilter]]

----
[[CategoryAPI]], [[CategoryEvents]]
