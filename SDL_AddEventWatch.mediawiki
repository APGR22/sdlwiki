<!-- pragma section-numbers off -->
<!-- pragma camelcase off -->
'''DRAFT'''

= SDL_AddEventWatch =
Use this function to add a callback to be triggered when an event is added to the event queue.


== Syntax ==
```c++
void SDL_AddEventWatch(SDL_EventFilter filter,
                       void*           userdata)
```

== Function Parameters ==
{|
|'''filter'''
|the function to call when an event happens; see [[#Remarks|Remarks]] for details
|-
|'''userdata'''
|a pointer that is passed to '''filter'''
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
<<Include(SDL_SetEventFilter, , , from="Start Include here.", to="##End Include here")>>
: where <code>YourEventFilter</code> is the name of your function and its parameters are:
 ||<code>userdata</code>||what was passed as '''userdata''' to [[SDL_AddEventWatch]]()||
 ||<code>event</code>||the event that triggered the callback||

: If '''filter''' returns 0 then the event will be dropped from the queue, otherwise the event queue will be preserved.

/!\ Be very careful of what you do in the event filter function, as it may run in a different thread!

There is one caveat when dealing with the SDL_QUITEVENT event type. It is called when the window manager desires to close the application window or when SIGINT arrives on Unix systems. If the event filter returns 1, then the window will be closed, otherwise the window will remain open if possible.

If the quit event is generated by an interrupt signal, it will bypass the internal queue and be delivered to watch callback immediately, or arrive at the next event poll.
<<Color2(green,Do these paragraphs about SDL_QUITEVENT apply here?)>>

== Related Functions ==
:[[SDL_DelEventWatch]]
:[[SDL_SetEventFilter]]

----
[[CategoryAPI]], [[CategoryEvents]]
