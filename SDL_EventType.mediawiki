<!-- pragma section-numbers off -->
<!-- pragma camelcase off -->
'''DRAFT'''

= SDL_EventType =
An enumeration of the types of events that can be delivered.


== Values ==
{|
|<style="color: #808080;">SDL_FIRSTEVENT
|<style="color: #808080;">do not remove (unused)
|-
|
|<bgcolor="#EDEDED">''Application events''
|-
|SDL_QUIT
|user-requested quit; see [[#Remarks|Remarks]] for details
|-
|
|<bgcolor="#EDEDED">''Android and iOS events; see [[#Android and iOS Events|Remarks]] for details''
|-
|SDL_APP_TERMINATING
|
|-
|SDL_APP_LOWMEMORY
|
|-
|SDL_APP_WILLENTERBACKGROUND
|
|-
|SDL_APP_DIDENTERBACKGROUND
|
|-
|SDL_APP_WILLENTERFOREGROUND
|
|-
|SDL_APP_DIDENTERFOREGROUND
|
|-
|
|<bgcolor="#EDEDED">''Window events''
|-
|[[SDL_WindowEvent|SDL_WINDOWEVENT]]
|window state change
|-
|[[SDL_SysWMEvent|SDL_SYSWMEVENT]]
|system specific event
|-
|
|<bgcolor="#EDEDED">''Keyboard events''
|-
|[[SDL_KeyEvent|SDL_KEYDOWN]]
|key pressed
|-
|[[SDL_KeyEvent|SDL_KEYUP]]
|key released
|-
|[[SDL_TextEditingEvent|SDL_TEXTEDITING]]
|keyboard text editing (composition)
|-
|[[SDL_TextInputEvent|SDL_TEXTINPUT]]
|keyboard text input
|-
|
|<bgcolor="#EDEDED">''Mouse events''
|-
|[[SDL_MouseMotionEvent|SDL_MOUSEMOTION]]
|mouse moved
|-
|[[SDL_MouseButtonEvent|SDL_MOUSEBUTTONDOWN]]
|mouse button pressed
|-
|[[SDL_MouseButtonEvent|SDL_MOUSEBUTTONUP]]
|mouse button released
|-
|[[SDL_MouseWheelEvent|SDL_MOUSEWHEEL]]
|mouse wheel motion
|-
|
|<bgcolor="#EDEDED">''Joystick events''
|-
|[[SDL_JoyAxisEvent|SDL_JOYAXISMOTION]]
|joystick axis motion
|-
|[[SDL_JoyBallEvent|SDL_JOYBALLMOTION]]
|joystick trackball motion
|-
|[[SDL_JoyHatEvent|SDL_JOYHATMOTION]]
|joystick hat position change
|-
|[[SDL_JoyButtonEvent|SDL_JOYBUTTONDOWN]]
|joystick button pressed
|-
|[[SDL_JoyButtonEvent|SDL_JOYBUTTONUP]]
|joystick button released
|-
|[[SDL_JoyDeviceEvent|SDL_JOYDEVICEADDED]]
|joystick connected
|-
|[[SDL_JoyDeviceEvent|SDL_JOYDEVICEREMOVED]]
|joystick disconnected
|-
|
|<bgcolor="#EDEDED">''Controller events''
|-
|[[SDL_ControllerAxisEvent|SDL_CONTROLLERAXISMOTION]]
|controller axis motion
|-
|[[SDL_ControllerButtonEvent|SDL_CONTROLLERBUTTONDOWN]]
|controller button pressed
|-
|[[SDL_ControllerButtonEvent|SDL_CONTROLLERBUTTONUP]]
|controller button released
|-
|[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEADDED]]
|controller connected
|-
|[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEREMOVED]]
|controller disconnected
|-
|[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEREMAPPED]]
|controller mapping updated
|-
|
|<bgcolor="#EDEDED">''Touch events''
|-
|[[SDL_TouchFingerEvent|SDL_FINGERDOWN]]
|
|-
|[[SDL_TouchFingerEvent|SDL_FINGERUP]]
|
|-
|[[SDL_TouchFingerEvent|SDL_FINGERMOTION]]
|
|-
|
|<bgcolor="#EDEDED">''Gesture events''
|-
|[[SDL_MultiGestureEvent|SDL_DOLLARGESTURE]]
|
|-
|[[SDL_MultiGestureEvent|SDL_DOLLARRECORD]]
|
|-
|[[SDL_MultiGestureEvent|SDL_MULTIGESTURE]]
|
|-
|
|<bgcolor="#EDEDED">''Clipboard events''
|-
|SDL_CLIPBOARDUPDATE
|the clipboard changed
|-
|
|<bgcolor="#EDEDED">''Drag and drop events''
|-
|[[SDL_DropEvent|SDL_DROPFILE]]
|the system requests a file open
|-
|
|<bgcolor="#EDEDED">''These are for your use, and should be allocated with [[SDL_RegisterEvents]]()''
|-
|SDL_USEREVENT
|a user-specified event
|-
|SDL_LASTEVENT
|only for bounding internal arrays
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
=== Application Events ===
An SDL_QUIT event is generated when the user tries to close the last remaining SDL_Window.  If it is ignored or filtered out, the window will remain open.  If it is not ignored or filtered, it is queued normally and the window is allowed to close.  When the window is closed, screen updates will complete, but have no effect.

On Mac OS X, pressing Command-Q (the standard keyboard shortcut for "Quit this application") will cause SDL to generate an SDL_QUIT event. The application is still responsible for terminating itself, however.

[[SDL_Init]]() installs signal handlers for <code>SIGINT</code> (keyboard interrupt) and <code>SIGTERM</code> (system termination request), if handlers do not already exist, that generate SDL_QUIT events as well.  There is no way to determine the cause of an SDL_QUIT event, but setting a signal handler in your application will override the default generation of quit events for that signal.

=== Android and iOS Events ===
What we currently label as "Android and iOS events" are specific to mobile and embedded devices that have different requirements than your usual desktop application. These events ''must'' be handled in an event filter, since often the OS needs an immediate response and will terminate your process shortly after sending the event, and if it sits in the SDL event queue, it'll be too late. You can handle everything else through a normal [[SDL_PollEvent|SDL_PollEvent()]] loop, but you should set up a callback with [[SDL_SetEventFilter|SDL_SetEventFilter()] for these specific events.

This is how these events currently map to the underlying OS:

{|
|SDL event
|What
|iOS
|Android
|-
|SDL_APP_TERMINATING
|The application is being terminated by the OS.
|applicationWillTerminate()
|onDestroy()
|-
|SDL_APP_LOWMEMORY
|The application is low on memory, free memory if possible.
|applicationDidReceiveMemoryWarning()
|onLowMemory()
|-
|SDL_APP_WILLENTERBACKGROUND
|The application is about to enter the background.
|applicationWillResignActive()
|onPause()
|-
|SDL_APP_DIDENTERBACKGROUND
|The application did enter the background and may not get CPU for some time.
|applicationDidEnterBackground()
|onPause()
|-
|SDL_APP_WILLENTERFOREGROUND
|The application is about to enter the foreground.
|applicationWillEnterForeground()
|onResume()
|-
|SDL_APP_DIDENTERFOREGROUND
|The application is now interactive.
|applicationDidBecomeActive()
|onResume()
|}

== Related Structures ==
: [[SDL_JoyAxisEvent]]
: [[SDL_JoyBallEvent]]
: [[SDL_JoyButtonEvent]]
: [[SDL_JoyHatEvent]]
: [[SDL_JoyDeviceEvent]]
: [[SDL_ControllerAxisEvent]]
: [[SDL_ControllerButtonEvent]]
: [[SDL_ControllerDeviceEvent]]
: [[SDL_KeyboardEvent]]
: [[SDL_MouseButtonEvent]]
: [[SDL_MouseMotionEvent]]
: [[SDL_MouseWheelEvent]]
: [[SDL_QuitEvent]]
: [[SDL_SysWMEvent]]
: [[SDL_TextEditingEvent]]
: [[SDL_TextInputEvent]]
: [[SDL_UserEvent]]
: [[SDL_WindowEvent]]
: [[SDL_DropEvent]]
: [[SDL_TouchFingerEvent]]
: [[SDL_DollarGestureEvent]]
: [[SDL_MultiGestureEvent]]


== Related Functions ==

----
[[CategoryEnum]], [[CategoryEvents]]
