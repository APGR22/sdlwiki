<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_CreateRGBSurfaceFrom =
Use this function to allocate ,,and free,, an RGB surface ^from pixels^.


== Syntax ==
```c++
SDL_Surface* SDL_CreateRGBSurfaceFrom (void*  pixels,
                                       int    width,
                                       int    height,
                                       int    depth,
                                       int    pitch,
                                       Uint32 Rmask,
                                       Uint32 Gmask,
                                       Uint32 Bmask,
                                       Uint32 Amask)
```

== Function Parameters ==
{|
|'''pixels'''
|a pointer to a set of pixels to use on the surface
|-
|'''width'''
|the width of the surface
|-
|'''height'''
|the height of the surface
|-
|'''depth'''
|the depth of the surface in bits; see [[#Remarks|Remarks]] for details
|-
|'''pitch'''
|the pitch of the pixels
|-
|'''Rmask'''
|the red mask for the pixels
|-
|'''Gmask'''
|the green mask for the pixels
|-
|'''Bmask'''
|the blue mask for the pixels
|-
|'''Amask'''
|the alpha mask for the pixels
|}

== Return Value ==
A pointer to an [[SDL_Surface]] to be created.  If the function runs out of memory, it will return NULL. 

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
If ,,the,, '''depth''' is 4 or 8 bits, an empty palette is allocated for the surface. If ,,the,, '''depth''' is greater than 8 bits, the pixel format is set using the flags '[RGB]mask'. <<Color2(green,Should it still mention flags since there is no flag param in this function?  Should it instead say using the source pixel format?)>>

== Related Functions ==
:[[SDL_CreateRGBSurface]]
:[[SDL_FreeSurface]]

----
[[CategoryAPI]], [[CategorySurface]]
