<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->

= SDL_CreateRGBSurfaceFrom =
Use this function to allocate a new RGB surface with existing pixel data.


== Syntax ==
```c++
SDL_Surface* SDL_CreateRGBSurfaceFrom (void*  pixels,
                                       int    width,
                                       int    height,
                                       int    depth,
                                       int    pitch,
                                       Uint32 Rmask,
                                       Uint32 Gmask,
                                       Uint32 Bmask,
                                       Uint32 Amask)
```

== Function Parameters ==
{|
|'''pixels'''
|a pointer to existing pixel data
|-
|'''width'''
|the width of the surface
|-
|'''height'''
|the height of the surface
|-
|'''depth'''
|the depth of the surface in bits; see [[#Remarks|Remarks]] for details
|-
|'''pitch'''
|the length of a row of pixels in bytes
|-
|'''Rmask'''
|the red mask for the pixels
|-
|'''Gmask'''
|the green mask for the pixels
|-
|'''Bmask'''
|the blue mask for the pixels
|-
|'''Amask'''
|the alpha mask for the pixels
|}

== Return Value ==
Returns the new [[SDL_Surface]] structure that is created or NULL if it fails; call [[SDL_GetError]]() for more information.  

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
<<Include(SDL_CreateRGBSurface, , , from="== Remarks ==", to="== Related Functions ==")>>

No copy is made of the pixel data. You should not free the pixel data until you have freed the surface.  The pixel data won't be freed automatically when the surface is freed.

== Related Functions ==
:[[SDL_CreateRGBSurface]]
:[[SDL_FreeSurface]]

----
[[CategoryAPI]], [[CategorySurface]]
