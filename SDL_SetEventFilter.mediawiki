<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_SetEventFilter =
Use this function to set up a filter to process all events before they change internal state and are posted to the internal event queue.


== Syntax ==
```c++
void SDL_SetEventFilter(SDL_EventFilter filter,
                        void*           userdata)
```

== Function Parameters ==
{|
|'''filter'''
|a function that gets called when an event happens; see [[#Remarks|Remarks]] for details
|-
|'''userdata'''
|^a pointer filled in with user-specified information to be filtered^
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
The '''filter''' function has the following form:
 ```c++
int SDL_EventFilter(void *userdata, SDL_Event * event);
```

If the ^resulting^ filter returns 1, then the event will be added to the internal queue.
If it returns 0, then the event will be dropped from the queue, but the internal state will still be updated.  This allows selective filtering of dynamically arriving events.

/!\ Be very careful of what you do in the event filter function, as it may run in a different thread!

There is one caveat when dealing with the SDL_QUITEVENT event type.  The event filter is only called when the window manager desires to close the application window.  If the event filter returns 1, then the window will be closed, otherwise the window will remain open if possible.

If the quit event is generated by an interrupt signal, it will bypass the internal queue and be delivered to the application at the next event poll.

<<Color2(green,Should this be noted here?  Is this no longer valid in 1.3?)>>
*Note: Events pushed onto the queue with [[SDL_PushEvent]]() or [[SDL_PeepEvents]]() do not get passed through the event filter.* 

== Related Functions ==
:[[SDL_GetEventFilter]]
:[[SDL_PeepEvents]] *???
:[[SDL_PushEvent]] *???

----
[[CategoryAPI]], [[CategoryEvents]]
