<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_BuildAudioCVT =
Use this function to initialize an [[SDL_AudioCVT]] structure for conversion.


== Syntax ==
```c++
int SDL_BuildAudioCVT(SDL_AudioCVT*   cvt, 
                      SDL_AudioFormat src_format, 
                      Uint8           src_channels, 
                      int             src_rate, 
                      SDL_AudioFormat dst_format, 
                      Uint8           dst_channels, 
                      int             dst_rate)
```

== Function Parameters ==
{|
|'''cvt'''
|a pointer to an [[SDL_AudioCVT]] structure that is filled in with audio conversion information
|-
|'''src_format'''
|the source format of the audio data; for more info see [[SDL_AudioFormat]]
|-
|'''src_channels'''
|the number of channels in the source
|-
|'''src_rate'''
|the frequency or samples-per-second of the source
|-
|'''dst_format'''
|the destination format of the audio data; for more info see [[SDL_AudioFormat]]
|-
|'''dst_channels'''
|the number of channels in the destination
|-
|'''dst_rate'''
|the frequency or samples-per-second of the destination
|}

<<Color2(green,Should "frequency or samples-per-second" be changed to "frequency (samples per second)" or can rate be two different types of units?)>>

== Return Value ==
Returns 1 if the audio filter is set up, 0 if there's no conversion needed, or -1 if the format conversion is not supported; call [[SDL_GetError]]() for more information.

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
Before an [[SDL_AudioCVT]] structure can be used to convert audio data it must be initialized with source and destination information.

For information on audio formats see [[SDL_AudioSpec]].

*<br/>Currently only rate conversions of 2^x^ and (1/2)^x^ with x > 0 are done, ,,nearing,, ^whichever most closely approximates^ the requested rate conversion.<br/>*

== Related Functions ==
 [[SDL_ConvertAudio]]

----
[[CategoryAPI]], [[CategoryAudio]]
