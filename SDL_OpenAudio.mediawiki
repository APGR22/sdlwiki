= SDL_OpenAudio =

This function is a legacy means of opening the audio device.

== Syntax ==

<syntaxhighlight lang='c'>
int SDL_OpenAudio(SDL_AudioSpec * desired,
                  SDL_AudioSpec * obtained);
</syntaxhighlight>

== Function Parameters ==

{|
|'''desired'''
|an [[SDL_AudioSpec]] structure representing the desired output format. Please refer to the [[SDL_OpenAudioDevice]] documentation for details on how to prepare this structure.
|-
|'''obtained'''
|an [[SDL_AudioSpec]] structure filled in with the actual parameters, or NULL.
|}

== Return Value ==

Returns This function opens the audio device with the desired parameters,
and returns 0 if successful, placing the actual hardware parameters in the
structure pointed to by <code>obtained</code>.



== Remarks ==

This function remains for compatibility with SDL 1.2, but also because
it's slightly easier to use than the new functions in SDL 2.0. The new,
more powerful, and preferred way to do this is [[SDL_OpenAudioDevice]]().

This function is roughly equivalent to:



<syntaxhighlight lang='c'>++
[[SDL_OpenAudioDevice]](NULL, 0, desired, obtained, [[SDL_AUDIO_ALLOW_ANY_CHANGE]]);
</syntaxhighlight>

With two notable exceptions:

* If <code>obtained</code> is NULL, we use <code>desired</code> (and allow no changes), which means desired will be modified to have the correct values for silence, etc, and SDL will convert any differences between your app's specific request and the hardware behind the scenes. 
* The return value is always success or failure, and not a device ID, which means you can only have one device open at a time with this function.

== Code Examples ==

<syntaxhighlight lang='c++'>
SDL_AudioSpec want, have;

SDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */
want.freq = 48000;
want.format = AUDIO_F32;
want.channels = 2;
want.samples = 4096;
want.callback = MyAudioCallback; /* you wrote this function elsewhere -- see SDL_AudioSpec for details */

if (SDL_OpenAudio(&want, &have) < 0) {
    SDL_Log("Failed to open audio: %s", SDL_GetError());
} else {
    if (have.format != want.format) {
        SDL_Log("We didn't get Float32 audio format.");
    }
    SDL_PauseAudio(0); /* start audio playing. */
    SDL_Delay(5000); /* let the audio callback play some sound for 5 seconds. */
    SDL_CloseAudio();
}
</syntaxhighlight>

== Related Functions ==

:[[SDL_CloseAudio]]
:[[SDL_LockAudio]]
:[[SDL_PauseAudio]]
:[[SDL_UnlockAudio]]


== Related Structures ==

:[[SDL_AudioSpec]]
----
[[CategoryAPI]], CategoryAudio


