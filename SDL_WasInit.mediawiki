
= SDL_WasInit =
Use this function to get a mask of the specified subsystems which have previously been initialized.


== Syntax ==
```c++
Uint32 SDL_WasInit(Uint32 flags)
```

== Function Parameters ==
{|
|'''flags'''
|any of the flags used by [[SDL_Init]](); see [[#flags|Remarks]] for details
|}

== Return Value ==
If '''flags''' is 0 it returns a mask of all initialized subsystems, otherwise it returns the initialization status of the specified subsystems.

The return value does not include SDL_INIT_NOPARACHUTE.

== Code Examples ==
```c++
/* Get init data on all the subsystems */
Uint32 subsystem_init;

subsystem_init = SDL_WasInit(SDL_INIT_EVERYTHING);

if (subsystem_init & SDL_INIT_VIDEO) {
    printf("Video is initialized.\n");
} else {
    printf("Video is not initialized.\n");
}
```
```c++
/* Just check for one specific subsystem */

if (SDL_WasInit(SDL_INIT_VIDEO) != 0) {
    printf("Video is initialized.\n");
} else {
    printf("Video is not initialized.\n");
}
```
```c++
/* Check for two subsystems */
Uint32 subsystem_mask = SDL_INIT_VIDEO | SDL_INIT_AUDIO;

if (SDL_WasInit(subsystem_mask) == subsystem_mask) {
    printf("Video and Audio initialized.\n");
} else {
    printf("Video and Audio not initialized.\n");
}
```

== Remarks ==
<span id="flags"></span>These are the flags which may be passed to [[SDL_WasInit]]() and may be OR'd together to query multiple subsystems simultaneously.

<<Include(SDL_Init, , , from="OR'd together:", to="If you want to initialize")>>

== Related Functions ==
:[[SDL_Init]]
:[[SDL_InitSubSystem]]

----
[[CategoryAPI]], [[CategoryInit]]
