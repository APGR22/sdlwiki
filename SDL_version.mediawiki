<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
{|
|<tablewidth="100%"style="color: rgb(255, 0, 0); text-align: center;">DRAFT 
|}


= SDL_version =
A structure that contains information about the version of SDL in use.


== Data Fields ==
{|
|Uint8 
|'''major''' 
|major version 
|-
|Uint8 
|'''minor''' 
|minor version 
|-
|Uint8 
|'''patch''' 
|update version 
|}

== Code Examples ==
<<Include(SDL_GetVersion, , , from="== Code Examples ==", to="== Remarks")>>

== Remarks ==
Represents the library's version as three levels:

* major revision (increments with massive changes, additions, and enhancements)
* minor revision (increments with backwards-compatible changes to the major revision), and
* patchlevel (increments with fixes to the minor revision)

The macro [[SDL_VERSION]] can be used to populate this structure with information. 

== Related Functions ==
: [[SDL_GetVersion]]

== Related Macros ==
:[[SDL_VERSIONNUM]]
This macro turns the version numbers into a numeric value:
 ```(1,2,3) -> (1203)```
```c++
SDL_VERSIONNUM(X, Y, Z)
((X)*1000 + (Y)*100 + (Z))
```
* This assumes that there will never be more than 100 patchlevels.
<br/>

:[[SDL_COMPILEDVERSION]]
This is the version number macro for the current SDL version.
```c++
SDL_COMPILEDVERSION \
SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)
```
<br/>

:[[SDL_VERSION_ATLEAST]]
This macro will evaluate to true if compiled with SDL at least X.Y.Z.
```c++
SDL_VERSION_ATLEAST(X, Y, Z) \
(SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z))
```
<br/>

----
CategoryStruct
