<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->

= SDL_CreateWindow =
Use this function to create a window with the specified position, dimensions, and flags.


== Syntax ==
```c++
SDL_Window* SDL_CreateWindow(const char* title,
                              int         x,
                              int         y,
                              int         w,
                              int  	  h,
                              Uint32      flags)
```

== Function Parameters ==
{|
|'''title'''
|the title of the window, in UTF-8 encoding
|-
|'''x'''
|the x position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED
|-
|'''y'''
|the y position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED
|-
|'''w'''
|the width of the window
|-
|'''h'''
|the height of the window
|-
|'''flags'''
|0, or one or more [[SDL_WindowFlags]] OR'd together; see [[#flags|Remarks]] for details
|}

== Return Value ==
Returns the window that was created or NULL on failure; call [[SDL_GetError]]() for more information.

== Code Examples ==
```c++

// Example program:
// Using SDL2 to create an application window

#include <SDL2/SDL.h>
#include <iostream>

using namespace std;

int main(int argc, char* argv[]){

  SDL_Init(SDL_INIT_VIDEO);   // Initialize SDL2
  
  SDL_Window *pWindow;        // Declare a pointer to an SDL_Window
  
  // Create an application window with the following settings:
  pWindow = SDL_CreateWindow( 
    "An SDL2 window",         //    const char* title
    SDL_WINDOWPOS_UNDEFINED,  //    int x: initial x position
    SDL_WINDOWPOS_UNDEFINED,  //    int y: initial y position
    640,                      //    int w: width, in pixels
    480,                      //    int h: height, in pixels
    SDL_WINDOW_SHOWN          //    Uint32 flags: window options, see below
  );
  
  // Check that the window was successfully made
  if(pWindow==NULL){   
    // In the event that the window could not be made...
    cout << "Could not create window: " << SDL_GetError() << '\n';
    return 1;
  }
  
  // The window is open: enter program loop (see SDL_PollEvent)

  SDL_Delay(3000);  // Pause execution for 3000 milliseconds, for example
  
  // Close and destroy the window
  SDL_DestroyWindow(pWindow); 
   
  // Uninitialize SDL2 and exit the program
  SDL_Quit(); 
  return 0;   
 
}

```

== Remarks ==
<span id="flags"></span> '''flags''' may be a mask of any of the following: 
{|
|SDL_WINDOW_FULLSCREEN
|-
|SDL_WINDOW_OPENGL
|-
|SDL_WINDOW_SHOWN
|-
|SDL_WINDOW_BORDERLESS
|-
|SDL_WINDOW_RESIZABLE
|-
|SDL_WINDOW_MAXIMIZED
|-
|SDL_WINDOW_MINIMIZED
|-
|SDL_WINDOW_INPUT_GRABBED
|}

== Related Functions ==
:[[SDL_DestroyWindow]]

----
[[CategoryAPI]], [[CategoryVideo]]
