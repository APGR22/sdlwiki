<!-- #master-page:CategoryTemplate -->
<!-- #master-date:Unknown-Date -->
<!-- format wiki -->
<!-- language en -->
'''DRAFT'''

= Thread Management =

'''Primary Include:'''  [http://hg.libsdl.org/SDL/file/68dfd6df47da/include/SDL_thread.h SDL_thread.h]

Other Includes:  SDL_stdinc.h, SDL_error.h,
: SDL_mutex.h (contains thread synchronization primitives)


== Introduction ==
The SDL thread structure is defined in SDL_thread.c.<br/>
: ```typedef struct SDL_Thread SDL_Thread;```

We compile SDL into a DLL. This means that it's the DLL which creates a new thread for the calling process with the [[SDL_CreateThread]]() API. <<Color2(green,Should SDL_CreateThread be un-hyperlinked here?  No page yet.  Doesn't look like it'll have one?)>>  There is a problem with this, that only the RTL of the SDL.DLL will be initialized for those threads, and not the RTL of the calling application!

To solve this, we make a little hack here.  <<Color2(green,Could this line and the next paragraph be joined and made a little less informal?  Example:  To solve this we will always use... -or- To solve this requires a little hack.  We'll always use...)>>

We'll always use the caller's _beginthread() and _endthread() APIs to start a new thread. This way, if it's the SDL.DLL which uses this API, then the RTL of SDL.DLL will be used to create the new thread, and if it's the application, then the RTL of the application will be used.

So, in short:
Always use the _beginthread() and _endthread() of the calling runtime library!

<<Color2(green,There is a lot of info in the header that looks like it might be code examples or coding info but is formatted more like complex defines.  Does any of that belong here?)>>
 
== Functions ==

<<FullSearch(category:CategoryThread)>>

----
CategoryCategory
