<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->

= SDL_AudioSpec =
A structure that describes the audio output format. It contains a callback that is called when the audio device needs more data.


== Data Fields ==
{|
|int
|'''freq'''
|DSP frequency (samples per second)
|-
|[[SDL_AudioFormat]]
|'''format'''
|audio data format
|-
|Uint8
|'''channels'''
|number of channels: 1 mono, 2 stereo
|-
|Uint8
|'''silence'''
|audio buffer silence value (calculated)
|-
|Uint16
|'''samples'''
|audio buffer size in samples (power of 2)
|-
|Uint32
|'''size'''
|audio buffer size in bytes (calculated)
|-
|[[SDL_AudioCallback]]
|'''callback'''
|a function that is called when the audio device needs more data; see [[#callback|Remarks]] for details
|-
|void*
|'''userdata'''
|a pointer that is passed as the first parameter to '''callback'''
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
The calculated values in this structure are calculated by [[SDL_OpenAudio]]().

Stereo samples are stored in a LRLRLR ordering.

<span id="callback"></span> '''callback''' is of the form:
```c++
void callback(void*  userdata, 
              Uint8* stream, 
              int    len);
```
{|
|'''userdata'''
|an application-specific parameter saved in the [[SDL_AudioSpec]] structure
|-
|'''stream'''
|a pointer to the audio data buffer to be filled in by the callback
|-
|'''len'''
|the length of that buffer in bytes
|}

Once the callback returns, the buffer will no longer be valid.

== Related Functions ==
:[[SDL_LoadWAV_RW]]
:[[SDL_OpenAudio]]
:[[SDL_OpenAudioDevice]]

----
[[CategoryStruct]]
