<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->

= SDL_AudioSpec =
A structure that contains audio data.  This structure ''(function in header)'' is called when the audio device needs more data.


== Structure Parameters ==
{|
|'''stream'''
|a pointer to the audio data buffer
|-
|'''len'''
|the length of that buffer in bytes
|}

== Data Fields ==
{|
|int
|'''freq'''
|DSP frequency -- samples per second
|-
|[[SDL_AudioFormat]]
|'''format'''
|audio data format
|-
|Uint8
|'''channels'''
|number of channels: 1 mono, 2 stereo
|-
|Uint8
|'''silence'''
|audio buffer silence value (calculated)
|-
|Uint16
|'''samples'''
|audio buffer size in samples (power of 2)
|-
|Uint32
|'''size'''
|audio buffer size in bytes (calculated)
|-
|void*
|'''userdata'''
|
|-
|[[SDL_AudioCallback]]
|'''callback'''
|
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
The calculated values in this structure are calculated by [[SDL_OpenAudio]]().

Once the callback returns, the buffer will no longer be valid.

Stereo samples are stored in a LRLRLR ordering.

The callback is of the form:
```c++
void (SDLCALL* callback)
     (void*    userdata, 
      Uint8*   stream, 
      int      len);
void* userdata
```

== Related Functions ==
:[[SDL_LoadWAV_RW]]
:[[SDL_OpenAudio]]
:[[SDL_OpenAudioDevice]]

----
[[CategoryStruct]]
