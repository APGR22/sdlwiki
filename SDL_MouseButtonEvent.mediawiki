<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_MouseButtonEvent =
A structure that contains mouse button event ,,structure,, ^information^ ,,(event.button.*),,.


== Data Fields ==
{|
|Uint32
|'''type'''
|SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP
|-
|Uint32
|'''windowID'''
|the window with mouse focus, if any
|-
|Uint8
|'''button'''
|the mouse button index
|-
|Uint8
|'''state'''
|SDL_PRESSED or SDL_RELEASED
|-
|Uint8
|'''padding1'''
|
|-
|Uint8
|'''padding2'''
|
|-
|int
|'''x'''
|X coordinate, relative to window
|-
|int
|'''y'''
|Y coordinate, relative to window
|}

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
*[[SDL_MouseButtonEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP is reported.

When a mouse button press or release is detected the number of the button pressed (from 1 to 255, with 1 usually being the left button and 2 the right) is placed into '''button''', the position of the mouse when this event occured is stored in the '''x''' and the '''y'''  fields. ,,Like [[SDL_KeyboardEvent]], ,,information on whether the event was a press or a release event is stored in both the '''type''' and '''state''' fields, ,,but this should be obvious,,.

Mouse wheel events are reported as buttons 4 (up) and 5 (down). Two events are generated i.e. you get an SDL_MOUSEBUTTONDOWN followed by an SDL_MOUSEBUTTONUP event.*
<<Color2(green,Should it read 4 (forward) and 5 (backward) instead of up and down or is a mouse wheel event a click on the wheel like a center button instead of a roll action?)>>

== Related Structures ==
:[[SDL_MouseMotionEvent]] *???
:[[SDL_MouseWheelEvent]] ???

== Related Functions ==

----
[[CategoryStruct]], [[CategoryEventsStruct]]
