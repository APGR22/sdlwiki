= SDL 1.3 Roadmap =

== Introduction ==
This is a list of features which are in progress for the SDL 1.3 release.  The features are organized by subsystem and assigned to developers.


== Video ==

=== Complete ===
* <<Color2(green, Sam: Add support for multiple windows)>>
* <<Color2(green, Sam: Create 3D accelerated texture based rendering API)>>

=== Required ===
* ???: Implement landscape mode for iPhone port
* Sam: Support for multiple displays
* <<Color2(green, Windows)>>
* <<Color2(green, Mac OS X)>>
* Linux
* Sam: Support for selecting video mode refresh rate
* <<Color2(green, Windows)>>
* <<Color2(green, Mac OS X)>>
* Linux
* ???: Add OpenGL 3.0 context support
* Sam: Create API for clipboard support (check out PyGame)
* Sam: Create flags for specifying foreign window event behavior

=== Wishlist ===
* Create desktop video mode change notification
* Add concept of viewport to fullscreen windows
* Add support for synchronizing 2D updates with vblank (bug #406)
* Support video modes with alpha channels
* Support shaped windows
* Support always-on-top window styles
* Implement NET_WM_PING and NET_WM_PID/WM_CLIENT_MACHINE (http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html#KILLINGWINDOWS)
* Support desktop windows
   ```c++
        setAttribute(Qt::WA_X11NetWmWindowTypeDesktop);
        setWindowFlags(Qt::SplashScreen);

        Qt::WindowFlags flags = 0;
            flags |= Qt::FramelessWindowHint;
            flags |= Qt::Tool;
            flags |= Qt::WindowStaysOnBottomHint;
```
* Support multiple icon sizes (e.g. for Windows Vista)

== Audio ==

=== Complete ===
* <<Color2(green, Ryan: Create audio recording API)>>

=== Wishlist ===
* PCM volume control

== Event ==

=== Required ===
* Sam: Add a timestamp to events
* Sam: Add modifier state to key and button events

=== Wishlist ===
* Add a way to dynamically register for custom event types
* Add a timeout parameter for SDL_WaitEvent() (http://lists.libsdl.org/pipermail/sdl-libsdl.org/2008-May/thread.html#65067)

== Mouse Input ==

=== Required ===
* Ryan: Support for multiple mice
* Q: What is the mapping of individual mice to pointers?  Is there a "master pointer" that multiple mice share and then events for the individual mice?  Is there a dual mode, where you have a single pointer that all mice affect, and you can switch to multiple pointers, each affected by a single mouse?
* Sam: Support showing / hiding the cursor
* Sam: Reimplement mouse grab support
* Verify cursor location is correct when ungrabbed
* Verify proper behavior with Vista DPI scaling

=== Wishlist ===
* Sam: Support color cursors
* Sam: Support animated cursors

== Keyboard Input ==

=== Required ===
* Add support for multiple keyboards (wishlist?)
* <<Color2(green, Sam: Create new text input event separate from key events)>>
* Q: When you're enabling or disabling text events via keystroke, how do you ignore the text generated by the key that is toggling text input?
    A: Key events are guaranteed to happen first
* Q: How do you handle key repeat?
* Sam/Jiang: Create IME API and support system IME interfaces
* Windows
* <<Color2(green, Mac OS X)>>
* Linux
* Sam: Add name to keysym and name to scancode lookup functions

== Joystick Input ==

=== Required ===
* <<Color2(green, Edgar: Create and implement Force Feedback API)>>
* <<Color2(green, Windows)>> - need to fix building on cygwin32
* <<Color2(green, Mac OS X)>>
* <<Color2(green, Linux)>>

== Multi-touch Input ==

=== Required ===
* ???: Create multi-touch input API

== Multi-threading / CPU info ==

=== Complete ===
* <<Color2(green, Sam: Create API for getting the number of CPUs)>>
* <<Color2(green, Windows)>>
* <<Color2(green, Mac OS X)>>
* <<Color2(green, Linux)>>

=== Required ===
* Sam: Create API for thread priority
* Sam: Create API for thread processor affinity

== Timers ==

=== Required ===
* Add higher precision timers for profiling

== General ==

=== Required ===
* Sam: Public license for SDL_compat.c, tests, and SDL_main*
* Sam: Create extended set of (negative) error codes and have the API functions document and return them.
