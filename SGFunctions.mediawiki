<!-- pragma section-numbers off -->
<!-- pragma camelcase off -->
<!-- acl All:read -->
'''DRAFT'''

= Style Guide: Function Pages =
This guide provides specific instructions for editing or adding your own content to each section of the Function pages in this wiki.


<span id="ToC"></span>

== General Guidelines ==
'''Function pages should provide basic information about the SDL functions to allow users to most effectively utilize them in their projects.'''

Please observe the following for all function pages:  
* Do not post anything that you do not have permission to post publicly.

* Sections should have adequate details to make them clear and useful while remaining brief wherever possible.  Code Examples and Remarks may be more extensive than other sections if necessary.

* Please remember to keep it accurate, simple, and easy to understand.

* Do not remove, modify, or add to the markup (#pragma, etc.) above the page title.

* Do not remove, modify, or add section headings unless specifically mentioned below.

* In general, we prefer that you do not remove or modify existing content unless it is clearly incorrect or out of date.

* Pages with <<Color2(red,DRAFT)>> at the top are in progress and will often contain unusual content, formatting, or notes.  Please do not remove or modify these.  That will all be corrected/removed upon final edit.

For assistance with editing, saving, or wiki-appropriate markup see the [http://wiki.libsdl.org/moin.cgi/SGWikiBasics Wiki Basics] Style Guide or contact us at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>>.


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
== Editing Specific Sections ==
=== Title ===
'''''Do not edit the Title.'''''

The Title section consists of the page heading and its markup:

 ```= SDL_FunctionName =``` 

For function pages this is the name of the function being described on the page and should match the address of the page.

''Example'': Page address ```http://wiki.libsdl.org/moin.cgi/SDL_CreateWindow``` should have matching title {{{SDL_CreateWindow}}} and describe the [[SDL_CreateWindow]]() function.

If you believe a change is necessary please contact us at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>>.


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Description ===
The Description section immediately follows the page title and does not have it's own heading.

All function descriptions begin with:
 ```Use this function to```

: followed by a ''clear and concise'' description of what the function does.  

<span id="note1"></span>
''Note'': Information presented in this section is meant to be limited.  Extended description information for more complicated functions should be placed in the [[#Remarks|Remarks]] section instead.  

<<Color2(red,''Important!'')>> Do not create a link to the Remarks section in the Description if additional information is located there.

{|
|<( |2 30%>''If'' __another API page__ is referenced in the description
|''Action'': As always,  be sure to [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Hyperlinks hyperlink] it and use () outside the link markup if it is a function.
|-
|''Example'': ```[[SDL_FunctionName]](), [[SDL_StructureName]]```
|-
|<( |3 30%>''If'' __a parameter__ on that page is referenced in the description
|''Action'': Use '''[http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Text_Formatting bold]''' for the parameter name.
|-
|''Note'': This is a very rare occurrence.
|-
|''Note'': If the reference is to the parameter as a ''concept'' (ie: the window to do something with) rather than ''directly'' to the parameter itself (ie: SDL_Function(window)) do not make it bold.<br/>~-Please don't just make the word bold every time it occurs on the page.-~
|}




~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Table of Contents ===
'''''Do not edit the Table of Contents.'''''

The Table of Contents consists of the following markup and is generated automatically on the parsed page.
 ```<<TableOfContents()>>```

If you believe a change is necessary please contact us at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>>.


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Syntax ===
The Syntax section consists of a code box that displays the basic components of the function using some specific formatting conventions.  Please apply the following conventions when editing this section.

The basic format is as follows:
```{
{{{#!highlight cpp
returnType* SDL_FunctionName(type1  parameter1,
                             type2* parameter2,
                             ...
                             typeN  parameterN)
```
}}}}

<<Color2(red,''Important!'')>> All types and parameters should be vertically aligned.
* Spacing for parameter __types__ is left-aligned to the type on the first line.
* Spacing for __parameters__ is left-aligned to the longest param type so that there is only 1 space between the longest type (with any pointers) and its parameter. 
* __Pointers__ (*, **) should be aligned next to the types (no space between) and should have at least one space following.

''Markup'': Use spaces as necessary to create the correct alignment.  Within a code box spacing is fixed-width.

''Note'': __To be omitted__
* All additional text that may be found in the header or elsewhere, such as extern, SDLCALL, etc.
* The space between <code>SDL_FunctionName</code> and (.
* Ending semi-colon (;)

''Note'': __To be included__
* The code box and colorizing markup above and below the function syntax<br/><code>```</code>```c++```<br/><code>}}}</code>
 * A single space between `returnType` and `SDL_FunctionName`
 * Commas at the end of each line before the last if there is more than 1 parameter
 * The parentheses enclosing the parameters

''Note'': Do not remove or alter the code box markup surrounding the function syntax.  The starting and ending markup must remain on separate lines above and below the rest of the content in order to generate the code box.

||<( |3 30%>''If'' a function refers to a __callback function__||''Action'': Place any relevant info about the callback function in the [[#Remarks|Remarks]] section and place a link in the parameters section as described [[#parameters|below]].||
||''Note'': Callback functions do not get their own pages.||
||''Example'': [[SDL_AddEventWatch]](), [[SDL_AddTimer]]()||

''Example'': {{{{
{{{#!highlight cpp

           1 space      no space  spaces (as needed)
              |             \    |_________|
SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops*     src,
                              int            freesrc,
                              SDL_AudioSpec* spec,     <- longest type
                              Uint8**        audio_buf,   sets alignment
                              Uint32*        audio_len)
||||||||||||||||||||||||||||||      \       |
      spaces (as needed)          no space  1 space
```
}}}}



~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
<span id="parameters"></span>
=== Function Parameters ===
The Function Parameters section provides basic information about each parameter in the function and is presented in table format.

''<<Color2(red,Important!)>>''
{|
|<( |2 30%>''If'' the parameter is __void__
|''Action'': Delete the entire Function Parameters section, including the header.
|-
|''Example'': [[SDL_AllocRW]]()
|-
|<30%>''If'' the function __has parameters__
|''Action'': See the remainder of this section for details.
|}

''Markup'': Use [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Tables basic table markup] and enclose each parameter name in [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Text_Formatting bold] markup.

The basic format is as follows:

```
||'''parameter1'''||description||
||'''parameter2'''||description||
||'''parameterN'''||description||
```

* The __first column__ contains all of the parameter names, without types or pointers, in bold.
* The __second column__ contains a simple description of each parameter using some specific formatting conventions.
: ''<<Color2(red,Important!)>>'' All descriptions begin with a ''lower case'' letter, end ''without'' a period, and are generally not complete sentences.
* There are a few content-dependent conventions we have chosen for consistency across pages - see the tables below for details. 

''Example'': [[SDL_SetColorKey]]()

{|
|
|<bgcolor="#EDEDED">''Content-dependent formatting: General''
|-
|<( |3 30%>''If'' __more than one statement__ must be included in the description
|''Action'': Separate them with a semi-colon (;)
|-
|''Note'': This should be avoided whenever possible.  See the next ''If'' statement in this table for more information.
|-
|''Example'': [[SDL_PixelFormatEnumToMasks]]()
|-
|<( |4 30%>''If'' a __more detailed description__ is required to adequately explain a parameter
|<span id="details"></span>''Action 1'' : Append the following, verbatim, to the end of the brief description<br/>```; see [[#Remarks|Remarks]] for details```
|-
|''Action 2'': Place the more detailed information in the [[#Remarks|Remarks]] section
|-
|''Action 3'': See the next ''If'' in this table
|-
|''Example'': [[SDL_CreateWindow]]()
|-
|<( |3 30%>''If'' the __Remarks section is large__
|''Action 1'': Create an [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Anchors anchor] immediately before the additional comments you are adding to the Remarks section
|-
|''Markup'': Use ```<span id="anchorname"></span>```, where <code>anchorname</code> is a name of your choosing, to create the anchor in the Remarks section. See [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Anchors Anchors] for details.
|-
|''Action 2'': Modify the Remarks link in the parameter description (see ''[[#details|Action 1]]'' in the previous ''If'') to the following:<br/>```; see [[#anchorname|Remarks]] for details```<br/>where <code>anchorname</code> matches the name you chose for the anchor in ''Action 1''.
|-
|<( |2 30%>''If'' __there is a pointer__ associated with the parameter
|''Action'': Avoid mentioning pointers unless they are critical to understanding the parameter or there is little other way to describe it (ie: void*)
|-
|''Example'': [[SDL_SetColorKey]]()
|-
|<( |2 30%>''If'' a pointer points to __something that is filled in by the function__ or that __has been filled in__
|''Action'': Use the phrase <code>filled in with</code> in the description
|-
|''Example'': [[SDL_QueryTexturePixels]]()
|-
|<( |4 30%>''If'' the description mentions __a structure that has a page__
|''Action 1'': Use the following pattern to describe the parameter:<br/><code>the/an</code> ```[[SDL_StructureName]]``` <code>structure to <action></code> or <code>representing <some piece of information></code>
|-
|''Action 2'': Check the [[#specific|table below]] for structure-specific phrasing.
|-
|''Note'': Be sure to hyperlink the structure name as shown in ''Action 1''.
|-
|''Example'': [[SDL_UnionRect]]()
|-
|<( |3 30%>''If'' the description mentions __a structure that ''does not'' have a page__
|''Action'': Use the plain English term to describe the structure (ie: SDL_Window == <code>the window</code>) and omit the hyperlink.
|-
|''Note'': Please check the current wiki before selecting this option for wording, as a page may have been created since this was written or since you last checked.
|-
|''Example'': [[SDL_RenderClear]]()
|-
|<( |2 30%>''If'' a description must refer to any other __page in the API__
|''Action'': Create a [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Hyperlinks hyperlink] to the page.
|-
|''Note'': ''If'' the description mentions an __enumeration__ it is not necessary to describe it as an enumeration as above for structures, but do hyperlink if there is a page.
|-
|<( |2 30%>''If'' the parameter is __for internal use, deprecated, or read-only__
|''Action'': Include the following, verbatim, in the first cell of the row between the starting table markup and the text:<br/>```<rowbgcolor="#808080">```
|-
|''Example'': ```
|<rowbgcolor="#808080">'''param'''
|description
|```
|-
|<( |4 30%>''If'' __a parameter references another parameter__ on that same page
|''Action'': Use '''[http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Text_Formatting bold]''' for the parameter name.
|-
|''Note'': This is a very rare occurrence.
|-
|''Note'': If the reference is to the parameter as a ''concept'' (ie: the window to do something with) rather than ''directly'' to the parameter itself (ie: SDL_Function(window)) do not make it bold.<br/>~-Please don't just make the word bold every time it occurs on the page.-~
|-
|''Example'': [[SDL_EnclosePoints]]()
|-
|<( |3 30%>''If'' a description is referring to something that could be __any one of a group of similar items__ (ie: rectangles)
|''Action'': Begin the description with <code>a/an</code>
|-
|''Example'': [[SDL_HasIntersection]]()
|-
|''Note'': We realize that this is a somewhat arbitrary distinction depending upon your perspective.  If you are unsure whether to use <code>a/an</code> or <code>the</code> it may be helpful to do a quick text search for other pages with the same or similar parameter and copy the format there.  Ultimately, though, it's not worth losing sleep over. ;) Just pick one.
|-
|<( |3 30%>''If'' a description is referring __to a specific item from a group__ (ie: a specific window)
|''Action'': Begin the description with <code>the</code>
|-
|''Example'': [[SDL_BlitScaled]]()
|-
|''Note'': We realize that this is a somewhat arbitrary distinction depending upon your perspective.  If you are unsure whether to use <code>a/an</code> or <code>the</code> it may be helpful to do a quick text search for other pages with the same or similar parameter and copy the format there.  Ultimately, though, it's not worth losing sleep over. ;) Just pick one.
|}

''Note'': It would only rarely be appropriate to use the exact same description of a common parameter every time that parameter appears in the API.  However, the same or very similar description can be used for many occurrences of the same parameter, enhancing consistency across pages.  The following table provides a list of these commonly used descriptions.

''Action'': When choosing a description phrase for a parameter please check this list to see if any of these common descriptions is applicable, even if a minor modification is required.

<span id="specific"></span>
{|
|
|<bgcolor="#EDEDED">''Content-dependent formatting: Specific''
|-
|<( |4 30%>''If'' the parameter is __SDL_Palette* palette__
|''Action 1'': Most often this description begins with <code>the [[SDL_Palette]] structure to</code>, followed by what to do with the palette.
|-
|''Action 2'': The most common version is <code>the [[SDL_Palette]] structure to use</code>
|-
|''Example'': [[SDL_SetSurfacePalette]](), [[SDL_FreePalette]]()
|-
|''Note'': Of course other phrases to describe this parameter may become necessary.  A text search for "SDL_Palette* palette" should provide you with other descriptions if they arise.
|-
|<( |4 30%>''If'' the parameter is __SDL_Rect* rect(s)__
|''Action 1 - '''rect''''': Most often this description begins with <code>the/an</code> ```[[SDL_Rect]]``` <code>structure</code> <code>representing the rectangle to</code>, followed by what the rectangle is for (ie: fill, draw, intersect, etc).
|-
|''Action 2 - '''rects''''': When the parameter is plural it refers to an array and will most often begin with <code>an array of</code> ```[[SDL_Rect]]``` <code>structures</code> <code>representing the rectangles to</code>, followed by what the rectangle is for.
|-
|''Example'': [[SDL_FillRect]](), [[SDL_RenderDrawRect]](), [[SDL_IntersectRectAndLine]](), [[SDL_RenderDrawRects]]()
|-
|''Note'': Of course there are some other phrases to describe these parameters.  A text search for "SDL_Rect* rect" should provide you with plenty of other examples of both the singular and plural parameters.
|-
|<( |3 30%>''If'' the parameter is __SDL_Renderer* renderer__
|''Action 1'': A rare exception, this description is __always__ <code>the rendering context</code> (at least so far).
|-
|''<<Color2(red,Important!)>>'' Please use this description for ''all'' occurrences of this parameter unless/until it appears in the API in a different context that calls for another description.  A text search for "SDL_Renderer* renderer" should be used to determine if this has become the case.
|-
|''Example'': [[SDL_RenderPresent]](), [[SDL_RenderDrawLine]](), [[SDL_CreateTexture]]()
|-
|<( |5 30%>''If'' the parameter is __SDL_Surface* surface__
|''Action 1'': Most often this description begins with <code>the [[SDL_Surface]] structure to</code>, followed by what is happening with the structure (ie: optimize, be locked, etc.).
|-
|''Action 2'': The most common versions are <code>the [[SDL_Surface]] structure to update</code> (often used with Set functions) or <code>the [[SDL_Surface]] structure to query</code> (often used with Get functions).
|-
|''Action 3'': Some will be best described by the following instead:  <code>the [[SDL_Surface]] structure representing</code> <something>.
|-
|''Example'': [[SDL_SetSurfaceRLE]](), [[SDL_LockSurface]](), [[SDL_GetClipRect]](), [[SDL_SaveBMP_RW]]()
|-
|''Note'': Of course there are some other phrases to describe this parameter.  A text search for "SDL_Surface* surface" should provide you with plenty of other examples.
|-
|<( |4 30%>''If'' the parameter is __SDL_Texture* texture__
|''Action 1'': Most often this description begins with <code>the texture to</code>, followed by what is being done (see ''Action 2'').
|-
|''Action 2'': The most common versions are <code>the texture to update</code> (often used with Set functions) or <code>the texture to query</code> (often used with Get functions).
|-
|''Example'': [[SDL_SetTextureAlphaMod]](), [[SDL_QueryTexturePixels]](), [[SDL_UnlockTexture]]()
|-
|''Note'': Of course there are some other phrases to describe this parameter.  A text search for "SDL_Texture* texture" should provide you with plenty of other examples.
|-
|<( |4 30%>''If'' the parameter is __SDL_Window* window__
|''Action 1'': Most often this description begins with <code>the window to</code>, followed by what is being done (ie: minimize, maximize, show, etc).
|-
|''Action 2'': The most common versions are <code>the window to change</code> (often used with Set functions) or <code>the window to query</code> (often used with Get functions).
|-
|''Example'': [[SDL_RestoreWindow]](), [[SDL_SetWindowTitle]](), [[SDL_GetWindowFlags]]()
|-
|''Note'': Of course there are some other phrases to describe this parameter.  A text search for "SDL_Window* window" should provide you with plenty of examples.
|}

<!-- #Standardized table block for specific table: -->
<!-- #||<( |4 30%>''If'' the parameter is ____||''Action 1'': Most often this description begins with <code></code>, followed by what is being done (ie: ).|| -->
<!-- #||''Action 2'': The most common versions are <code></code> or <code></code>.  Use as applicable.|| -->
<!-- #||''Example'': [[SDL_]](), [[SDL_]](), [[SDL_]]()|| -->
<!-- #||''Note'': Of course there are some other phrases to describe this parameter.  A text search for "" should provide you with plenty of examples.|| -->

''Note'': Please do not use Includes in this section.  It may occasionally be appropriate to copy and paste the parameters and descriptions from one function to another (perhaps with minor changes).  This is the preferred method over using an Include.

~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Return Value ===
The Return Value section provides basic information about what, if anything, a function will return upon success or failure.  

{|
|<( |3 30%>''<<Color2(red,Important!)>>''<br/>''If'' the return value is __void__
|''Note'': This is '''not''' the same as __void*__!  See table below for void* return values.
|-
|''Action'': Delete the entire Return Value section, including the header.
|-
|''Example'': [[SDL_FreeSurface]]()
|}


Otherwise, return values follow this basic format:
 ```
Returns <something> on success or <something else> on failure; call [[SDL_GetError]]() for more information.
```

Use the following tables to determine what to replace <code><something></code> and <code><something else></code> with in the standard statement above, and to determine whether some other action is required.
* For __simple replacements__ ''Action'' will only contain two replacement statements with the top being for success (<code><something></code>) and the bottom being for failure (<code><something else></code>).
: ''Example'': If the second column says
: ''Action'':<br/><code>0</code><br/><code>a negative error code</code>
: then <code><something></code> should be replaced with the number <code>0</code> and <code><something else></code> should be replaced by the phrase <code>a negative error code</code>.
* For __complex replacements or other actions__ ''Action'' and/or a ''Note'' will detail what to do instead or as well.
* Please check both tables.

{|
|
|<bgcolor="#EDEDED">''Replacements by type''
|-
|<( 30%>''If'' the return value is __an int (0 or <0)__
|''Action'':<br/><code>0</code><br/><code>a negative error code</code>
|-
|<( |2 30%>''If'' the return value is __an int other than above or a float__
|''Action'': Replace <code><something></code> and <code><something else></code> with the applicable numbers.
|-
|''Example'': Returns 1 on success or 0 on failure.
|-
|<( 30%>''If'' the return value is __SDL_bool__
|''Action'':<br/><code>SDL_TRUE</code><br/><code>SDL_FALSE</code>
|-
|<( |3 30%>''If'' the return value is __a pointer or NULL__
|''Action'':Replace <code><something></code> with an appropriate description of the pointer (usually leaving out any mention of the pointer, as in parameters) and replace <code><something else></code> with NULL.
|-
|''Note'': See "''If'' the return value type is a structure" below for more details.
|-
|''Example'': [[SDL_SetVideoMode]]()
|-
|<( |3 30%>''If'' the return value type is __a structure__
|''Action'': The general format will approximate: <code>Returns an/the</code> ```[[SDL_StructureName]]``` <code>representing</code> <code><what it represents></code>, for success.  The failure statement will depend upon what is returned on failure, if anything.  See other ''If''s for options.
|-
|''Note'': Ideally in this case, you would search for other functions using the same return value and replicate the phrasing of others as appropriate. (Example search: "<code>returnValue</code> SDL_", where <code>returnValue</code> is replaced with the value you are interested in.)
|-
|''Example'': [[SDL_CreateRGBSurfaceFrom]]()
|-
|<( |3 30%>''If'' the return value is __void*__
|''Action'':See "''If'' the return value is a pointer or NULL" above.
|-
|''Note'': In some cases it will be appropriate to mention the pointer.  Ideally, look at other similar functions for guidance.
|-
|''Example'': [[SDL_LoadFunction]](), [[SDL_SetWindowData]]()
|-
|<( |3 30%>''If'' the return value type is __a Uint__
|''Action'': Replace <code><something></code> with a brief, appropriate description of the Uint.
|-
|''Example'': [[SDL_MapRGBA]](), [[SDL_WasInit]]()
|-
|''Note'': Very rarely the Uint that is returned is a mask of enumerated values.  See [[SDL_MasksToPixelFormatEnum]]() for an example of how to handle this.
|-
|<( |2 30%>''If'' the return value type is __a char or const char__
|''Action'': Replace <code><something></code> with a brief, appropriate description of the returned string.
|-
|''Example'': [[SDL_GetCurrentVideoDriver]]()
|-
|<( |2 30%>''If'' there are __more than 2__ possible return values
|''Action'': Add any additional values following the applicable rules above.  Keep the primary success and primary failure values first and last, respectively, or place them in some other logical order (such as numerical).
|-
|''Example'': [[SDL_HapticOpened]]()
|-
|<( |4 30%>''If'' the function __does not have a failure state__
|''Note'': It is ''very rare'' for a function to be unable to fail.  This option covers those rare cases only.
|-
|''Action 1'': ''If'' the function only has 1 return value state:<br/>Omit the second part of the statement and omit the call to SDL_GetError().
|-
|''Action 2'': ''If'' the function has 2 return values but they don't represent success and failure:<br/>Use <code>Returns <something></code> <code><in this case> or</code> <code><something else> otherwise.</code><br/>and omit the call to SDL_GetError().
|-
|''Example'': only 1 return state [[SDL_GetAudioDeviceStatus]](); alternate return state [[SDL_QuitRequested]]()
|}


{|
|
|<bgcolor="#EDEDED">''Replacements by other criteria''
|-
|<( |4 30%>''If'' __a parameter__ on that page is referenced in the return value
|''Action'': Use '''[http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Text_Formatting bold]''' for the parameter name.
|-
|''Note'': This is a very rare occurrence.
|-
|''Note'': If the reference is to the parameter as a ''concept'' (ie: the window) rather than ''directly'' to the parameter itself (ie: window) do not make it bold.<br/>~-Please don't just make the word bold every time it occurs on the page.-~
|-
|''Example'': [[SDL_LoadWAV_RW]](), [[SDL_GL_CreateContext]]()
|-
|<( |3 30%>''If'' the return value mentions __a structure that has a page__
|''Action'': Use the following pattern to describe the return value:<br/>Returns <code>the/an</code> ```[[SDL_StructureName]]``` <code>structure</code> <code>representing <some piece</code> <code>of information></code>
|-
|''Note'': Be sure to hyperlink the structure name as shown.
|-
|''Example'': [[SDL_UnionRect]]()
|-
|<( |2 30%>''If'' the return value mentions __a structure that ''does not'' have a page__
|''Action'': Use the plain English term to describe the structure (ie: SDL_Window == window).
|-
|''Note'': These structures may eventually have pages or other references worth linking to, in which case please follow the instructions above for linking to items with pages of their own.
|-
|<( |2 30%>''If'' the return value must refer to any other __page in the API__
|''Action'': Create a [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Hyperlinks hyperlink] to the page.
|-
|''If'' the page is for an __enumeration__ it is not necessary to describe it as an enumeration as above for structures.
|}

''Note'': It is extremely rare that an Include is appropriate in this section.  If it were to occur it would only be to provide a list of possible return values that are based on an enumeration (or similar).  In that case, please see the instructions for creating an Include in the [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Includes Wiki Basics] style guide, and the Include section of the [http://wiki.libsdl.org/moin.cgi/SGRemarks#Using_an_Include Remarks] style guide for details.
* ''If'' you use an Include in this section, please email <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> telling us what page received the Include and what page was used as the source.  We are keeping a list of all pages using Includes for future reference and this will help us to keep this list up to date.  We appreciate your taking time for this extra step to help us keep our records accurate and useful.  Thank you!


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Code Examples ===
The Code Examples section is meant to contain simple, meaningful examples of how to use the function in a program.  
* Unlike other sections, which should rarely require editing once DRAFT is removed, this section is ''expected'' to change over time.

This is one of the few sections that is intended to grow and adjust as users discover more information about a function that would be helpful to share with other users.

For the most part the contents of the Code Examples section will be user-generated and this section will remain as-is until users input their examples.

Please see the [http://wiki.libsdl.org/moin.cgi/SGCodeExamples Code Examples] Style Guide for details on editing this section.


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Remarks ===
The Remarks section is meant to contain additional information that did not fit in the other sections as well as comments regarding the behavior and use of the function in real-world applications.  
* Unlike other sections, which should rarely require editing once DRAFT is removed, this section is ''expected'' to change over time.

This is one of the few sections that is intended to grow and adjust as users discover more information about how a function behaves under different circumstances.

For the most part the contents of the Remarks section will be user-generated and this section will remain as-is until users input their comments. 

''Note'': This is __not__ an appropriate place to post questions, suggestions, bugs, or commentary.  Please use the other communication channels available to you, especially the forums and Feedback form, for these types of remarks.

Please see the [http://wiki.libsdl.org/moin.cgi/SGRemarks Remarks] Style Guide for details on editing this section.


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
=== Related Functions ===
The Related Functions section provides a list of other functions specifically referenced by that function or otherwise ''closely'' related to it.
* In general, a "Related Function" is one that is important to the __use__ or __understanding__ of the given function.

This list __should__ include:
* the opposite function in a function pair (ie: get/set, do/undo)
* functions that represent close alternatives (ie: general and specific versions, singular and plural versions)
* functions that are called by or otherwise very closely related to the actions of the primary function on the page

This list __should not__ include:
* the primary function on that page
* every other function that might be considered "related" 
: ~-An argument can usually be made for a "relationship" between many functions. Including all of them would make these lists much less valuable.-~
* all functions of similar type or action
* all functions of a related category
* functions that are indirectly related (ie: it might be common to use them together)
* functions that do not have a page in the wiki (usually because they are not public functions)
* non-functions (ie: do not include structures or enumerations in this list)

''Note'': In most cases a Related Function reference should be reciprocal - if you include function B on the page for function A then function A should be included on the page for function B.

''Markup'': Each function name should follow a single blank space and a period and should be enclosed in double brackets to create a [http://wiki.libsdl.org/moin.cgi/SGWikiBasics#Hyperlinks hyperlink].
: ''Note'': Do not include empty parentheses after the function names in this section.  They are all functions so it should be understood/unnecessary.

: The basic format for the Related Functions list is:
```
== Related Functions ==
 .[[SDL_FunctionName]]
 .[[SDL_FunctionName]]
```
: ~-''Note'': The heading was included to more clearly illustrate the blank space before the period at the beginning of each list line.  Without this markup the format will not parse correctly.-~

{|
|<( 30%>''If'' there is __more than one function__ in the list
|''Action'': List the functions in alphabetical order.
|-
|<( 30%>''If'' there are __no related functions__
|''Action'': This section may be removed entirely (including the heading) and added back at a later time if it becomes relevant.
|}

''Note'': Function pages do not include a "Related Structures" or "Related Enumerations" section as some of the other page types do.  If there are important related structures or enumerations they are to be included in the body of the page as links (usually in the Remarks section).  If you feel it is critical that a distinct section for one of these groups be included on a specific function page please contact us at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> to discuss it.

<!-- #''Note'': You may find more broadly related functions listed by category via the Category links in the [[#footer|footer section]] or by relationship in a broader, functional sense (often cross-category) on the Function Groups page(s) <<Color2(green,''(still to be created)'')>>. -->


~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
<span id="footer"></span>
=== Footer ===

The Footer section consists of a horizontal rule followed by two links separated by a comma.  

''Markup'': ```
----
[[CategoryAPI]], [[CategoryHeader]]
```
: where <code>CategoryAPI</code> is the same for every function page and <code>CategoryHeader</code> is function-specific with <code>Header</code> varying based on the header file containing the function (see below).

<<Color2(red,''Important!'')>> Category names do not always match the header file name.  Please consult the following table for the correct name to use so the function will appear in the correct list(s).

''Action 1'': Do not edit the <code>CategoryAPI</code> link!  

''Action 2'': The <code>CategoryHeader</code> link may be edited ''if'' the page still says ```[[CategoryHeader]]``` (as on a new page) or ''if'' the function has been relocated to another header (very rare).

''<<Color2(red,Important!)>>'' There are a few exceptions to this rule (pages with a name that does not match their header file).  These have been determined by the SDL team.  Please do not change an existing page's category name simply because it does not match its header file.  If you are concerned that a name is incorrect please contact us using the Feedback form or by email at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> to confirm the change first.  

''Markup'': Replace <code>CategoryHeader</code> with the appropriate category name from the table that follows, or contact us at <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> to find out what category name to use  if you are unsure or if the category appears to be missing.

{|
|<rowbgcolor="#EDEDED">''Header File Containing the Function*''
|''Corresponding Category Name''
|-
|SDL.h
|CategoryInit
|-
|SDL_assert.h
|CategoryAssertions
|-
|SDL_atomic.h
|CategoryAtomic
|-
|SDL_audio.h
|CategoryAudio
|-
|SDL_clipboard.h
|CategoryClipboard
|}
<!-- #||SDL_compat.h||CategoryCompat|| -->
<!-- #||SDL_copying.h|||| -->
{|
|SDL_cpuinfo.h
|CategoryCPU
|-
|SDL_endian.h
|CategoryEndian
|-
|SDL_error.h
|CategoryError
|-
|SDL_events.h
|CategoryEvents
|}
<!-- #||SDL_gesture.h|||| -->
{|
|SDL_haptic.h
|CategoryForceFeedback
|-
|SDL_hints.h
|CategoryHints
|}
<!-- #||SDL_input.h|||| -->
{|
|SDL_joystick.h
|CategoryJoystick
|-
|SDL_keyboard.h
|CategoryKeyboard
|-
|SDL_keycode.h
|CategoryKeyboard
|-
|SDL_loadso.h
|CategorySharedObject
|}
<!-- #||SDL_log.h|||| -->
<!-- #||SDL_main.h|||| -->
{|
|SDL_mouse.h
|CategoryMouse
|-
|SDL_mutex.h
|CategoryMutex
|}
<!-- #||SDL_name.h|||| -->
<!-- #||SDL_opengl.h||CategoryOpenGL|| -->
<!-- #||SDL_opengles.h||CategoryOpenGL|| -->
<!-- #||SDL_opengles2.h||CategoryOpenGL|| -->
{|
|SDL_pixels.h
|CategoryPixels
|-
|SDL_platform.h
|CategoryPlatform
|-
|SDL_power.h
|CategoryPower
|}
<!-- #||SDL_quit.h|||| -->
{|
|SDL_rect.h
|CategoryRect
|-
|SDL_render.h
|CategoryRender
|}
<!-- #||SDL_revision.h|||| -->
{|
|SDL_rwops.h
|CategoryIO
|-
|SDL_scancode.h
|CategoryKeyboard
|}
<!-- #||SDL_shape.h|||| -->
<!-- #||SDL_stdinc.h|||| -->
{|
|SDL_surface.h
|CategorySurface
|-
|SDL_syswm.h
|CategorySWM
|-
|SDL_thread.h
|CategoryThread
|-
|SDL_timer.h
|CategoryTimer
|}
<!-- #||SDL_touch.h|||| -->
<!-- #||SDL_types.h|||| -->
{|
|SDL_version.h
|CategoryVersion
|-
|SDL_video.h
|CategoryVideo
|-
|
|~-*Some exceptions exist.  See above.-~
|}











~-[[#ToC|Return to Table of Contents]]-~
<br/>
<br/>
----
== Resources ==

Our goal is to create accurate, consistent, helpful, user-friendly documentation.  We appreciate your efforts to make your additions fit into the existing framework and retain the same look and feel as much 
as possible.

If you have questions that aren't addressed here:
 a. Search for another page that contains something similar to what you want to do and copy all the basics as much as applicable.  
 a. Check the other SDL [http://wiki.libsdl.org/moin.cgi/Contributing#guides Style Guides].
 a. Post a question to [http://wiki.libsdl.org/moin.cgi/Contributing#form Feedback] and ''include a way to contact you''.
 a. Post a question to the [http://wiki.libsdl.org/moin.cgi/Contributing#list Mailing List]
 a. Send a comment or question to <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> for clarification.

If you have suggestions for changes or additions to this document or any other portion of the wiki please don't hesitate to contact us with your thoughts.  We are happy to have the participation!

------
== Disclaimer ==
```#!wiki note
All content modifications are subject to review for consistency and quality.  We reserve the right to remove or modify any content added to this wiki at any time.  You may direct questions or concerns to 
<<MailTo(ANTI SPAM wiki AT libsdl DOT org)>>.
```
