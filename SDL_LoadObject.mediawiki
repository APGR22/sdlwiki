<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_LoadObject =
Use this function to dynamically load a shared object and return a pointer to the object handle.


== Syntax ==
```c++
void* SDL_LoadObject(const char* sofile)
```

== Function Parameters ==
{|
|'''sofile'''
|a system dependent name of the object file
|}

== Return Value ==
Returns a pointer to the object handle or NULL if there was an error; call [[SDL_GetError]]() for more information.

== Code Examples ==
```c++
#include "SDL_loadso.h"

// Dynamically load mylib.so
SDL_LoadObject("mylib.so");
```

== Remarks ==
*<br/>These functions only work on C function names. Other languages may have name mangling and intrinsic language support that varies from compiler to compiler.

Make sure you declare your function pointers with the same calling convention as the actual library function. Your code will crash mysteriously if you do not do this.

Avoid namespace collisions. If you load a symbol from the library, it is not defined whether or not it goes into the global symbol namespace for the application. If it does and it conflicts with symbols in your code or other shared libraries, you will not get the results you expect.<br/>*

== Related Functions ==
:[[SDL_LoadFunction]] *
:[[SDL_UnloadObject]] *

----
[[CategoryAPI]], [[CategorySharedObject]]
