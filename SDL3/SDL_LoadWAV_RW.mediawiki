====== (This is the documentation for SDL3, which is under heavy development and the API is changing! [https://wiki.libsdl.org/ SDL2] is the current stable version!) ======
= SDL_LoadWAV_RW =

Load the audio data of a WAVE file into memory.

== Syntax ==

<syntaxhighlight lang='c'>
SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops * src,
                              int freesrc,
                              SDL_AudioSpec * spec,
                              Uint8 ** audio_buf,
                              Uint32 * audio_len);
</syntaxhighlight>

== Function Parameters ==

{|
|'''src'''
|The data source for the WAVE data
|-
|'''freesrc'''
|If non-zero, SDL will _always_ free the data source
|-
|'''spec'''
|An [[SDL_AudioSpec]] that will be filled in with the wave file's format details
|-
|'''audio_buf'''
|A pointer filled with the audio data, allocated by the function.
|-
|'''audio_len'''
|A pointer filled with the length of the audio data buffer in bytes
|}

== Return Value ==

Returns This function, if successfully called, returns <code>spec</code>,
which will be filled with the audio data format of the wave source data.
<code>audio_buf</code> will be filled with a pointer to an allocated buffer
containing the audio data, and <code>audio_len</code> is filled with the
length of that audio buffer in bytes.

This function returns NULL if the .WAV file cannot be opened, uses an
unknown data format, or is corrupt; call [[SDL_GetError]]() for more
information.

When the application is done with the data returned in
<code>audio_buf</code>, it should call [[SDL_free]]() to dispose of it.

== Remarks ==

Loading a WAVE file requires <code>src</code>, <code>spec</code>,
<code>audio_buf</code> and <code>audio_len</code> to be valid pointers. The
entire data portion of the file is then loaded into memory and decoded if
necessary.

If <code>freesrc</code> is non-zero, the data source gets automatically
closed and freed before the function returns.

Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and
32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and
A-law and mu-law (8 bits). Other formats are currently unsupported and
cause an error.

If this function succeeds, the pointer returned by it is equal to
<code>spec</code> and the pointer to the audio data allocated by the
function is written to <code>audio_buf</code> and its length in bytes to
<code>audio_len</code>. The [[SDL_AudioSpec]] members <code>freq</code>,
<code>channels</code>, and <code>format</code> are set to the values of the
audio data in the buffer. The <code>samples</code> member is set to a sane
default and all others are set to zero.

It's necessary to use [[SDL_free]]() to free the audio data returned in
<code>audio_buf</code> when it is no longer used.

Because of the underspecification of the .WAV format, there are many
problematic files in the wild that cause issues with strict decoders. To
provide compatibility with these files, this decoder is lenient in regards
to the truncation of the file, the fact chunk, and the size of the RIFF
chunk. The hints <code>[[SDL_HINT_WAVE_RIFF_CHUNK_SIZE]]</code>,
<code>[[SDL_HINT_WAVE_TRUNCATION]]</code>, and
<code>[[SDL_HINT_WAVE_FACT_CHUNK]]</code> can be used to tune the behavior
of the loading process.

Any file that is invalid (due to truncation, corruption, or wrong values in
the headers), too big, or unsupported causes an error. Additionally, any
critical I/O error from the data source will terminate the loading process
with an error. The function returns NULL on error and in all cases (with
the exception of <code>src</code> being NULL), an appropriate error message
will be set.

It is required that the data source supports seeking.

Example:

<syntaxhighlight lang='c'>
SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, &spec, &buf, &len);
</syntaxhighlight>

Note that the [[SDL_LoadWAV]] macro does this same thing for you, but in a
less messy way:

<syntaxhighlight lang='c'>
SDL_LoadWAV("sample.wav", &spec, &buf, &len);
</syntaxhighlight>

== Version ==

This function is available since SDL 3.0.0.

== Code Examples ==

<syntaxhighlight lang='c++'>
extern SDL_RWops *myRWops;
SDL_AudioSpec wav_spec;
Uint32 wav_length;
Uint8 *wav_buffer;

/* Load the WAV */
if (SDL_LoadWAV_RW(myRWops, 1, &wav_spec, &wav_buffer, &wav_length) == NULL) {
    fprintf(stderr, "Could not open test.wav: %s\n", SDL_GetError());
} else {
    /* Do stuff with the WAV data, and then... */
    SDL_FreeWAV(wav_buffer);
}
</syntaxhighlight>

== Related Functions ==

:[[SDL_free]]
:[[SDL_LoadWAV]]

----
[[CategoryAPI]], [[CategoryAudio]]


