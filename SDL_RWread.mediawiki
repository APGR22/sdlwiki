====== (This is the documentation for SDL3, which is under heavy development and the API is changing! SDL2 is the current stable version!) ======
= SDL_RWread =

Read from a data source.

== Syntax ==

<syntaxhighlight lang='c'>
size_t SDL_RWread(SDL_RWops *context,
                  void *ptr, size_t size,
                  size_t maxnum);
</syntaxhighlight>

== Function Parameters ==

{|
|'''context'''
|a pointer to an [[SDL_RWops]] structure
|-
|'''ptr'''
|a pointer to a buffer to read data into
|-
|'''size'''
|the size of each object to read, in bytes
|-
|'''maxnum'''
|the maximum number of objects to be read
|}

== Return Value ==

Returns the number of objects read, or 0 at error or end of file; call
[[SDL_GetError]]() for more information.

== Remarks ==

This function reads up to <code>maxnum</code> objects each of size
<code>size</code> from the data source to the area pointed at by
<code>ptr</code>. This function may read less objects than requested. It
will return zero when there has been an error or the data stream is
completely read.

[[SDL_RWread]]() is actually a function wrapper that calls the
[[SDL_RWops]]'s <code>read</code> method appropriately, to simplify
application development.

Prior to SDL 2.0.10, this function was a macro.

== Version ==

This function is available since SDL 3.0.0.

== Code Examples ==

<syntaxhighlight lang='c++'>
SDL_RWops *rw = SDL_RWFromFile("test.bin","r");
if (rw != NULL) {
    extern Uint8 buf[256];
    SDL_RWread(rw, buf, sizeof (buf), 1);
    SDL_RWclose(rw);
}
</syntaxhighlight>

Read a complete file in memory (assuming size can be detected) (from [https://gitlab.com/wikibooks-opengl/modern-tutorials/blob/master/common-sdl2/shader_utils.cpp OpenGL WikiBook]):
<syntaxhighlight lang='c++'>
char* file_read(const char* filename) {
	SDL_RWops *rw = SDL_RWFromFile(filename, "rb");
	if (rw == NULL) return NULL;

	Sint64 res_size = SDL_RWsize(rw);
	char* res = (char*)malloc(res_size + 1);

	Sint64 nb_read_total = 0, nb_read = 1;
	char* buf = res;
	while (nb_read_total < res_size && nb_read != 0) {
		nb_read = SDL_RWread(rw, buf, 1, (res_size - nb_read_total));
		nb_read_total += nb_read;
		buf += nb_read;
	}
	SDL_RWclose(rw);
	if (nb_read_total != res_size) {
		free(res);
		return NULL;
	}

	res[nb_read_total] = '\0';
	return res;
}
</syntaxhighlight>

== Related Functions ==

:[[SDL_RWclose]]
:[[SDL_RWFromConstMem]]
:[[SDL_RWFromFile]]
:[[SDL_RWFromFP]]
:[[SDL_RWFromMem]]
:[[SDL_RWseek]]
:[[SDL_RWwrite]]

----
[[CategoryAPI]], [[CategoryIO]]


