<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_GetVersion =
Use this function to get the version of SDL that is linked against your program.


== Syntax ==
```c++
void SDL_GetVersion(SDL_version* ver)
```

== Function Parameters ==
{|
|'''ver'''
|a pointer to the [[SDL_version]] structure that contains the version information
|}

== Code Examples ==
```c++
SDL_version compiled;
SDL_version linked;

SDL_VERSION(&compiled);
SDL_GetVersion(&linked);
printf("We compiled against SDL version %d.%d.%d ...\n",
       compiled.major, compiled.minor, compiled.patch);
printf("But we linked against SDL version %d.%d.%d.\n",
       linked.major, linked.minor, linked.patch);
```
<!-- # End 1 -->
```c++
You can add your code example here
```

== Remarks ==
If you are using a shared library (DLL) version of SDL, then it is possible that it will be different than the version you compiled against.  <<Color2(green,Can this function distinguish between the two? It isn't clear.)>>

This is a real function; the macro SDL_VERSION() tells you what version of SDL you compiled against: <<Color2(green,This line ends w/ a colon and is immediately before the code example in the header. Is it supposed to be in the Code Examples section?  Inside the box or outside?  Also it is not clear what this sentence is saying.  How is this function different from the macro? Does it tell you 2 things while the macro only tells one?)>>

This function may be called safely at any time, even before [[SDL_Init]]().

== Related Functions ==

----
[[CategoryAPI]], [[CategoryVersion]]
