<!-- pragma section-numbers 2 -->

= Building SDL2 for Android =


== Existing documentation ==

A lot of information can be found in [https://hg.libsdl.org/SDL/file/tip/README-android.txt SDL2/README-android.txt].

This page is more walkthrough-oriented.


== Pre-requisites ==

* Install minimal Java environment. For instance, in Debian/Ubuntu: ```
sudo apt-get install openjdk-7-jdk ant
```
* Install NDK (tested with r9d)
* Install the latest SDK, run <code>android</code> and install API 12
* Configure your environment variables, e.g.: ```
PATH="/usr/src/android-ndk-r9d:$PATH"          # for 'ndk-build'
PATH="/usr/src/android-sdk-linux/tools:$PATH"  # for 'android'
```


== Simple builds ==

=== SDL wrapper for simple programs ===

* Compile a sample app (calls ndk-build): ```
 cd /usr/src/SDL2/build-scripts/
 ./androidbuild.sh org.libsdl.testgles ../test/testgles.c
```
* Follow the instructions to install on your device: ```
 cd /usr/src/SDL2/build/org.libsdl.testgles/
 ant debug install
```

Notes:
* triple target armeabi/armeabi-v7a/x86 compilation!
* application doesn't quit


=== SDL wrapper + SDL_image NDK module ===

Let's modify <code>SDL2_image/showimage.c</code> to show a simple embedded image (e.g. XPM).

Then let's make an Android app out of it. To compile: ```
 cd /usr/src/SDL2/build-scripts/
 ./androidbuild.sh org.libsdl.showimage /usr/src/SDL2_image/showimage.c
 cd /usr/src/SDL2/build/org.libsdl.showimage/
 ln -s /usr/src/SDL2_image jni/
 ln -s /usr/src/SDL2_image/external/libwebp-0.3.0 jni/webp
 # - Edit jni/src/Android.mk
 #   LOCAL_SHARED_LIBRARIES := ... SDL2_image
 # - Edit jni/Application.mk: remove x86 where jpeg-9 doesn't build
 ndk-build -j$(nproc)
 ant debug install
```

Notes:
* application doesn't restart properly


== Build an autotools-friendly environment ==

You use autotools in your project and can't be bothering understanding ndk-build's cryptic errors? This guide is for you!

Note: this environment can be used for CMake too.

=== Compile a shared binaries bundle for SDL and SDL_* ===

* Start with a minimal build: ```
cd /usr/src/SDL2/
cd build-scripts/
./androidbuild.sh org.libsdl /dev/null
cd ../build/org.libsdl/
```
* Remove reference to our dummy file: ```
rm -rf jni/src/
```
* Get the latests SDL2_* libs from Mercurial (they fix a few bugs): ```
cd /usr/src/
hg clone http://hg.libsdl.org/SDL_image SDL2_image
hg clone http://hg.libsdl.org/SDL_mixer SDL2_mixer
hg clone http://hg.libsdl.org/SDL_net   SDL2_net
hg clone http://hg.libsdl.org/SDL_ttf   SDL2_ttf
```
* Reference SDL_image, SDL_mixer, SDL_ttf, and their dependencies, as NDK modules: ```
ln -s /usr/src/SDL2_image jni/
ln -s /usr/src/SDL2_image/external/libwebp-0.3.0 jni/webp
ln -s /usr/src/SDL2_mixer jni/
ln -s /usr/src/SDL2_mixer/external/libmikmod-3.1.12 jni/libmikmod
ln -s /usr/src/SDL2_mixer/external/smpeg2-2.0.0 jni/smpeg2
ln -s /usr/src/SDL2_net jni/
ln -s /usr/src/SDL2_ttf jni/
```
* Optionnaly edit <code>jni/Android.mk</code> to disable some formats, e.g.: ```
SUPPORT_MP3_SMPEG := false
include $(call all-subdir-makefiles)
```
* Launch the build! ```
ndk-build -j$(nproc)
```

Note: no need to add <code>System.loadLibrary</code> calls in <code>SDLActivity.java</code>, your application will be linked to them and Android's Linux loads them automatically.


=== Install SDL in a GCC toolchain ===

Now:
* Copy the NDK into a traditional GCC toolchain: ```
/usr/src/android-ndk-r9d/build/tools/make-standalone-toolchain.sh \
  --platform=android-12 --install-dir=/usr/src/ndk-standalone-12-arm --arch=arm
```
* Set your PATH (important, do it before any build): ```
PATH=/usr/src/ndk-standalone-12-arm/bin:$PATH
```
* Install the SDL2 binaries in the toolchain: ```
cd /usr/src/SDL2/build/org.libsdl/
for i in libs/armeabi/*; do ln -nfs $(pwd)/$i /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/; done
mkdir /usr/src/ndk-standalone-12-arm/sysroot/usr/include/SDL2/
\cp jni/SDL/include/* /usr/src/ndk-standalone-12-arm/sysroot/usr/include/SDL2/
\cp jni/*/SDL*.h /usr/src/ndk-standalone-12-arm/sysroot/usr/include/SDL2/
```
* Install <code>pkg-config</code> and install a host-triplet-prefixed symlink in the PATH (auto-detected by autoconf): ```
VERSION=0.9.6
wget http://rabbit.dereferenced.org/~nenolod/distfiles/pkgconf-$VERSION.tar.gz
tar xf pkgconf-$VERSION.tar.gz
cd pkgconf-$VERSION
mkdir native/ && cd native/
../configure --prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
make -j$(nproc)
make install
ln -s ../sysroot/usr/bin/pkgconf /usr/src/ndk-standalone-12-arm/bin/arm-linux-androideabi-pkg-config
mkdir /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/
```
* Install pkg-config <code>.pc</code> files for SDL: ```
cat <<'EOF' > /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/sdl2.pc
prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: sdl2
Description: Simple DirectMedia Layer is a cross-platform multimedia library designed to provide low level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.
Version: 2.0.3
Requires:
Conflicts:
Libs: -lSDL2
Cflags: -I${includedir}/SDL2   -D_REENTRANT
EOF

cat <<'EOF' > /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/SDL2_image.pc
prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_image
Description: image loading library for Simple DirectMedia Layer
Version: 2.0.1
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_image
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/SDL2_mixer.pc
prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_mixer
Description: mixer library for Simple DirectMedia Layer
Version: 2.0.1
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_mixer
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/SDL2_net.pc
prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_net
Description: net library for Simple DirectMedia Layer
Version: 2.0.1
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_net
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > /usr/src/ndk-standalone-12-arm/sysroot/usr/lib/pkgconfig/SDL2_ttf.pc
prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_ttf
Description: ttf library for Simple DirectMedia Layer with FreeType 2 support
Version: 2.0.13
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_ttf
Cflags: -I${includedir}/SDL2
EOF
```

=== Building other dependencies ===

You can add any other libraries (e.g.: SDL2_gfx, freetype, gettext, gmp...) using commands like: ```
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr \
  --with-some-option --enable-another-option \
  --disable-shared
make -j$(nproc)
make install
```

Static builds (<code>--disable-shared</code>) are recommended for simplicity (no additional <code>.so</code> to declare).

Example with SDL2_gfx: ```
VERSION=1.0.1
wget http://www.ferzkopp.net/Software/SDL2_gfx/SDL2_gfx-$VERSION.tar.gz
tar xf SDL2_gfx-$VERSION.tar.gz
mv SDL2_gfx-$VERSION/ SDL2_gfx/
cd SDL2_gfx/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-12-arm/sysroot/usr \
  --disable-shared --disable-mmx
make -j$(nproc)
make install
```

You can compile YOUR application using this technique, with some more steps to tell Android how to run it using JNI.


=== Build your autotools app ===

First, prepare an Android project:
* Copy and adapt the <code>/usr/src/SDL2/android-project</code> skeleton as explained in <code>README-android.txt</code>. You can leave it as-is in a first step.
* Make links to the SDL binaries as well: ```
for i in /usr/src/SDL2/build/org.libsdl/libs/armeabi/*; do ln -nfs $i libs/armeabi/; done
```

Make your project Android-aware:
* Add <code>/usr/src/SDL2/src/main/android/SDL_android_main.c</code> in your project (comment out the line referencing "SDL_internal.h")
* In your ```configure.ac```, detect Android: {{{
AM_CONDITIONAL(ANDROID, test "$host" == "arm-unknown-linux-androideabi")
}}}
* In your ```Makefile.am```, tell Automake you'll build executables as libraries, using something like: {{{
if ANDROID
<!--  Build .so JNI libs rather than executables -->
  AM_CFLAGS = -fPIC
  AM_LDFLAGS += -shared
  COMMON_OBJS += SDL_android_main.c
endif
}}}
* Cross-compile your project using the GCC toolchain environment we created: ```
PATH=/usr/src/ndk-standalone-12-arm/bin:$PATH
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi \
  --with-your-option --enable-your-other-option ...
make
```
* Do this again for any additional arch you want to support (TODO: see how to support <code>armeabi-v7a</code> and document what devices support it); something like: ```
mkdir cross-android-v7a/ && cd cross-android-v7a/
# .o: -march=armv5te -mtune=xscale -msoft-float -mthumb  =>  -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb
# .so: -march=armv7-a -Wl,--fix-cortex-a8
CFLAGS="-g -O2 -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb" LFDLAGS="-march=armv7-a -Wl,--fix-cortex-a8" \
  ../configure --host=arm-linux-androideabi \
  ...
```

Now you can install your pre-built binaries and build the Android project:
* Copy your program in <code>android-project/libs/armeabi/libmain.so</code>.
* Build your Android <code>.apk</code>: ```
android update project --name your_app --path . --target "android-12"
ant debug
ant installd
```
* You can run the application remotely: ```
adb shell am start -a android.intenon.MAIN -n org.libsdl.app/org.libsdl.app.SDLActivity  # replace with your app package
```
* Your SDL2 Android app is running!

=== Build your CMake app ===

(Work In Progress)

You can use our Android GCC toolchain using a simple toolchain file: ```
# CMake toolchain file
SET(CMAKE_SYSTEM_NAME Linux)  # Tell CMake we're cross-compiling
include(CMakeForceCompiler)
# Prefix detection only works with compiler id "GNU"
CMAKE_FORCE_C_COMPILER(arm-linux-androideabi-gcc GNU)
SET(ANDROID TRUE)
```

You then call CMake like this: ```
PATH=/usr/src/ndk-standalone-12-arm/bin:$PATH
cmake \
  -D CMAKE_TOOLCHAIN_FILE=../android_toolchain.cmake \
  ...
```
