<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_MapRGB =
Use this function to map an RGB triple to an opaque pixel value for a given pixel format.


== Syntax ==
```c++
Uint32 SDL_MapRGB(const SDL_PixelFormat* format,
                  Uint8                  r, 
                  Uint8                  g, 
                  Uint8                  b)
```

== Function Parameters ==
{|
|'''format'''
|an [[SDL_PixelFormat]] structure describing the format of the pixel
|-
|'''r'''
|the red component of the pixel in the range 0-255
|-
|'''g'''
|the green component of the pixel in the range 0-255
|-
|'''b'''
|the blue component of the pixel in the range 0-255
|}

== Return Value ==
A pixel value.

*<br/>Maps the RGB color value to the specified pixel format and returns the pixel value as a 32-bit int best approximating the given RGB color value for the given pixel format.

If the format has a palette (8-bit) the index of the closest matching color in the palette will be returned.

If the specified pixel format has an alpha component it will be returned as all 1 bits (fully opaque).

<<Color2(green,Does this next part belong in Remarks instead?)>>
If the pixel format bpp (color depth) is less than 32-bpp then the unused upper bits of the return value can safely be ignored (e.g., with a 16-bpp format the return value can be assigned to a Uint16, and similarly a Uint8 for an 8-bpp format).<br/>*

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
''You can add useful comments here''

== Related Functions ==
:[[SDL_GetRGB]] *
:[[SDL_GetRGBA]] *
:[[SDL_MapRGBA]]

----
[[CategoryAPI]], [[CategoryPixels]]
