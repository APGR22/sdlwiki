<!-- pragma section-numbers off -->
<!-- pragma camelcase off -->
'''DRAFT'''

= SDL_AndroidGetActivity =
Use this function to retrieve the Java instance of the activity class in an Android application.


== Syntax ==
```c++
void* SDL_AndroidGetActivity(void)
```

== Return Value ==
Returns the jobject representing the instance of the Activity class of the Android application, or NULL on error.

The jobject returned by the function is a local reference and must be released by the caller. See the !PushLocalFrame() and !PopLocalFrame() or !DeleteLocalRef() functions of the Java native interface ([http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html in Oracle's documentation]).

== Code Examples ==
```c++
// Calls the void MyActivity.showHome() method of the Java instance of the activity.
void showHome(void)
{
    // retrieve the JNI environment.
    JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();

    // retrieve the Java instance of the SDLActivity
    jobject activity = (jobject)SDL_AndroidGetActivity();

    // find the Java class of the activity. It should be SDLActivity or a subclass of it.
    jclass clazz( env->GetObjectClass(activity) );

    // find the identifier of the method to call
    jmethodID method_id = env->GetMethodID( clazz, "showHome", "()V" );

    // effectively call the Java method
    env->CallVoidMethod( activity, method_id );
    
    // clean up the local references.
    env->DeleteLocalRef(activity);
}
```

== Remarks ==
The prototype of the function in SDL's code actually declares a void* return type, even if the implementation returns a jobject. The rationale being that it allows not to include jni.h in the headers of the SDL. 

== Version ==
This function is available in SDL 2.0.0

== Related Functions ==
:[[SDL_AndroidGetJNIEnv]]

----
[[CategoryAPI]], [[CategorySystem]]
<!-- #See the Style Guide for instructions on editing the footer. -->
