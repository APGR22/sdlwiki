<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
<!-- acl All:read -->
'''DRAFT'''

= Style Guide: Wiki Basics =

<span id="ToC"></span>


== Getting Started ==

<!> '''In general, existing content, including markup, should not be modified or removed.'''

=== Opening An Editor ===
If a page can be edited you will see two options to choose from in the left column:
 1. <<Color2(blue,Edit (Text))>>
  The Text editor provides more power/flexibility for editing than the GUI editor but requires that you know the wiki markup.  Use the Text editor to see the content with raw markup.  You will need to use the Preview feature to view the content as it will appear when saved.
 (!) Specific markup instructions in this guide are for use with the Text editor but should also work in the GUI editor.<br/>
 For information on wiki markup not included here, or other MoinMoin-specific questions, please see the [http://wiki.libsdl.org/moin.cgi/HelpOnEditing wiki help documentation].

 1. <<Color2(blue,Edit (GUI))>>
  The GUI editor provides buttons, much like a simple word processor, to add formatting markup such as bolding text, making a table, or creating a numbered list.  It is simpler to use than the Text editor but does not provide buttons for all the possible markup.  Use the GUI editor to see the content appear roughly as it would on the screen as you edit or if you do not know or want to use the wiki markup.
 (!) The GUI editor is fairly self-explanatory; however, if you require further assistance, see [http://wiki.libsdl.org/moin.cgi/HelpOnGraphicalEditor HelpOnGraphicalEditor] for more detailed instructions.

Note that some formatting will appear slightly different in preview mode than on the finished screen.


=== Saving Your Changes ===
Before you save your changes please include a note in the Comment field below the editing box that summarizes what you have done.
 ''Sample comments'': 
* added comment to end of remarks
* added code example to C++ section
* remarked on use of function with [sound card model]

{i} Especially when using the text editor, use the <<Color2(blue,Preview)>> function in the left sidebar before saving your changes to ensure that the markup you have included is producing the desired result as well as to scan for errors in a different view.

When you have finished adding your content and filling in the Comment field, and are satisfied with the formatting, use the <<Color2(blue,Save Changes)>> function in the left sidebar to save your changes.

'''Automatic Backup of Drafts'''<br/>
~-(from: [http://wiki.libsdl.org/moin.cgi/HelpOnEditing Help On Editing])-~

 Every time you are in the editor and use the "Preview", "Spell Check", "Cancel" or "Save Changes" buttons, moin saves a draft copy of your work internally. Use preview often!

 If you hit "cancel" accidentally, your machine crashes, or the browser window was accidentally closed, then the automatic backup of your draft may be easily recovered.

 To recover that draft, you simply edit that page again. If there is a draft, an alert message will be in the message box [at the top] and a "load draft" button will be present [in the left column]. Clicking the "load draft" will load your saved draft into the editor box replacing the current revision already loaded. You can continue editing the loaded draft, but this time try to save it at the end. :)

 (!) Don't use the "preview", "spell check", "save changes" or "cancel" buttons on that page before "load draft" or you will overwrite your old draft with a new one.

 If you successfully save a page, the internal draft copy of it is not needed any more and will be deleted. 

[[#ToC|Return to Table of Contents]]



<span id="markup"></span>
== Some Markup Basics ==
Below is a summary of the most commonly used markup in this wiki and some hints and tricks for using it.

A good place to look for additional information on MoinMoin wiki markup is  [http://wiki.libsdl.org/moin.cgi/HelpOnMoinWikiSyntax HelpOnMoinWikiSyntax].  Also see the Editor Hints in the left sidebar when in Edit mode for some of the most common markup.  



<span id="spacing"></span>
=== Spacing ===
Both vertical and horizontal spacing can be rendered differently depending upon the combination of formatting markup that is used.  If your formatting is not working out the way you want check the notes below on other formatting that you have used nearby that may be affecting how the local formatting is interpreted.
 ''Example'': If you try to pick up a numbered list down the page after using unnumbered lines at the same indent level, the next number in the numbered list will count the unnumbered lines.
: See [[#problems1|Some Known Problems and Solutions]] below for notes on known interference between markup.

<span id="indent"></span>
==== Indenting ====
: ''Markup'': Place blank spaces at the beginning of a line of text to create indents. (this line has 1 space)
* Use one space for each indent level desired. (this line has 2 spaces)

: ''Note'': Use a period (.) after the spaces and before the text (usually separated by a space after but not necessary) to ensure that the indent does not become a bullet or numbered list.  Note that this markup will sometimes resolve problems when the spacing from line to line is not what you expected. (this line has 2 spaces and a starting period)

: ''Example'': ``` . This line starts with a period   ``` 
  ''generates''<br/>
: This line starts with a period

: ''<<Color2(red,Important!)>>'' Indenting often leads to inadvertent creating of a list.  Lists follow very limiting, sometimes difficult to figure out, rules.  See [[#lists|Lists]] below if your indenting is not working the way you think it should.

<span id="break"></span>
==== Hard Line Break ====
 ''Markup'': ```<br/>```
* Place the above markup wherever you want to force the following text onto the next line but keep it in the same paragraph.<br/>
* ''Note'': You cannot change indent level immediately following a hard line break.  (The next line is still part of the same paragraph.)
: ''Example'': Typing the following in the text editor ```
  1 first line<<BR>>  2 this line typed on same line after hard line break markup, same indent<<BR>>   3 this line typed on same line after hard line break markup, +1 indent<<BR>>  4 this line typed on same line after hard line break markup, -1 indent<<BR>>  . 5 this line typed on same line after hard line break markup, same indent with period<<BR>>6 this line typed on same line after hard line break markup without any indent
```
   ''generates''
: 1 first line<br/>  2 this line typed on same line after hard line break markup, same indent<br/>   3 this line typed on same line after hard line break markup, +1 indent<br/>  4 this line typed on same line after hard line break markup, -1 indent<br/>  . 5 this line typed on same line after hard line break markup, same indent with period<br/>6 this line typed on same line after hard line break markup without any indent

<span id="vertical"></span>
: ''Note'': Spaces between lines and paragraphs (which may be individual lines) are parsed with different spacing depending upon the context (especially relative indent level).  It may take some playing around with the markup to get the spacing you want, or it may be that you will have to accept a certain amount of pre-determined spacing between lines.
: ''Example'': Typing the following in the text editor ```
 1 hard return followed by next line same indent
 2 hard return followed by next line +1 indent
  3 hard return followed by next line same indent using period
  . 4 hard return followed by next line same indent, no period
  5 hard return followed by next line -1 indent
 6 hard return after hard line break markup, followed by next line same indent<<BR>>
 7<<BR>> 8 next line typed on same line after hard line break markup, same indent
```
   ''generates''
: 1 hard return followed by next line same indent
   2 hard return followed by next line +1 indent
    3 hard return followed by next line same indent using period
: 4 hard return followed by next line same indent, no period
    5 hard return followed by next line -1 indent
   6 hard return after hard line break markup, followed by next line same indent<br/>
   7<br/> 8 next line typed on same line after hard line break markup, same indent

* To ensure that the next line is treated as a separate line (not necessarily a separate paragraph!)
   a. use two consecutive hard returns (```Enter key```)
    ~-''Note'': this will leave a larger space between lines (usually a double-space) but it is treated as a new paragraph-~
   a. use a [[#break|hard line break]]
   a. [[#indent|indent]] more (farther right)
   a. use a [[#indent|period]] at the beginning of the line after indenting the same amount
   a. [[#indent|indent]] less (farther left)

[[#ToC|Return to Table of Contents]]


<span id="lists"></span>
==== Lists ====
<<Color2(red,''Important!'')>> Anything that interrupts a list, except a list item indented further right, will potentially end the list!  This may affect the indenting, count, or symbols if you try to restart the list below the interruption.  This may or may not be able to be overcome, so be careful with anything that interrupts a list!

Bullet Lists
: ''Markup'': Begin a line with a space followed by an asterisk to create a bulleted line of text (space after asterisk is optional but seems to be preferred)
: ''Example'': ```  * First line of bullet list```<br/>
   ''Generates'':
* First line of bullet list<br/>
Numbered Lists
: ''Markup'': Begin a line with a space followed by the number 1 and a period (or choose another number format such as i or a).
: ''Note'': Each line that should be part of the list begins with the same starting number. The wiki will generate sequential numbers in preview mode or after saving.
: ''Example'': ```
 1. First line of numbered list
 1. Second line of numbered list
```
  ''Generates'':
  1. First line of numbered list
  1. Second line of numbered list

 More wiki markup for lists can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnLists HelpOnLists]

<span id="problems1"></span>
==== Some Known Problems and Solutions ====
{|
|
|<bgcolor="#EDEDED">''Problem Category'': Vertical spacing isn't working properly
|-
|<( |3 30%>''Problem'': My text is on another line in the editor but grouped with the previous line in the preview/saved version
|''Cause'': Using a hard return (Enter key) at the end of a line is often '''not''' parsed as a line break.
|-
|''Solution 1'': Press the Enter key ''twice'' to put a space between paragraphs
|-
|''Solution 2'': Use a [[#break|Hard Line Break]].
|-
|<( |5 30%>''Problem'': There is too much/little space between lines of text
|''Cause'': Most of the vertical spacing in this wiki is fixed and is determined based on other formatting choices.
|-
|''Solution'': You can force __additional__ space between lines of text using [[#break|Hard Line Breaks]].
|-
|''Note'': You '''cannot''' force __less__ space between lines of text in separate paragraphs.  The only option for keeping lines of text close together is to use [[#break|Hard Line Breaks]] to keep lines within a paragraph.<br/><<Color2(red,''Important!'')>> There are limits to how you can change formatting within a paragraph.
|-
|''Note'': Indenting can affect vertical spacing.  See ''[[#vertical|Note]]'' above for details.
|}

{|
|
|<bgcolor="#EDEDED">''Problem Category'': My list isn't working properly
|-
|<( |6 30%>''Problem'': The __numbering__ in my list started over
|''Cause'': Most likely your numbering restarted because something broke the list into two parts.
|-
|''Solution 1'': Remove the interfering item or change it's indent to be subordinate in the list (add more spaces to indent more).
|-
|''Solution 2'': Try forcing a new starting number/letter.
|-
|''Markup'': place a <code>#value</code>, where # is the symbol and <code>value</code> is a number like 2, 3, 4... ('''not''' the character you want), immediately after the starting numbering markup.
|-
|''Example'': ``` 1.#4 text``` should force the list item to begin with the number 4.<br/>{{{a.#4 text}}} should force the list item to begin with the letter d.
|-
|<<Color2(red,''Important!'')>> This fix does not always work!!!
|-
|<( |5 30%>''Problem'': The indenting of my next list item is wrong
|''Cause 1'': The list is interrupted by another item (like a box of code) with __less indent__ (farther left) than the previous line of the list
|-
|''Result'': The interfering block forces the end of a list so the list begun after it is treated as a new list.<br/>~-(It also seems to default to a first level indent after an interruption regardless of the number of spaces you actually put in.)-~
|-
|''Solution'': One __possible__ workaround is to place a blank line containing a ```space period space``` ( . ) between the interfering content and the next line.<br/>~-''Note'': This seems to allow the wiki parser to interpret the indent count on the next line correctly but likely won't continue the list.  It does not always work!-~
|-
|''Note'': It may be necessary to indent one level ''less'' (farther left) than the line that is not being parsed correctly.  For example, if you need a line following an interruption to be at 3 indents, put the space-period-space ''fix'' immediately above it at 2 indents (ie: ```space space period space;  . ```).
|-
|<<Color2(red,''Important!'')>> Some list breaks cannot currently be fixed so you should be very careful when interrupting a list as it may force formatting you will not want.<br/>See [http://moinmo.in/MoinMoinBugs/MixedNumberedAndUnorderedLists?highlight=%28lists%29 Mixed Lists] for some discussion and examples of problems.<br/>~-''Note'': The contents at this link may change at any time and this link may not always be up to date.-~
|-
|<( |3 30%>''Cause 2'': A numbered list is interrupted by unnumbered items (like an indented line starting with a period) at the __same indent__ level
|''Result'': A numbered list skips numbers.
|-
|''Solution 1'': Put an extra space (Enter key) between list items and then force a number (or other sequential) value by adding #<code>value</code> immediately after the numbering markup, where 'value' is the number (or letter, etc.) that you would like to be in that location.
|-
|''Example'': See the Basic Format section of [http://wiki.libsdl.org/moin.cgi/SGTutorials#Basic_Format SGTutorials] then go into edit mode to see the markup.
|}





* A numbered list may require that the correct start number be manually entered, however this may not always work.  See [http://wiki.libsdl.org/moin.cgi/HelpOnLists HelpOnLists] for details on forcing a start number/letter.
* For more information about this 'bug' and another possible workaround see [http://moinmo.in/MoinMoinBugs/BlockElementsInListBreakIndent BlockElementsInListBreakIndent].
{i} A related issue is trying to use a mixed list where bullets follow numbers on the same indent level.  This will likely parse as the next consecutive number regardless of your use of an asterisk to indicate the use of a bullet.  The same workaround seems to resolve this issue as well.
* For more information about this 'bug' and another possible workaround see [http://moinmo.in/MoinMoinBugs/MixedNumberedAndUnorderedLists MixedNumberedAndUnorderedLists].

[[#ToC|Return to Table of Contents]]



<span id="formatting"></span>
=== Text Formatting ===

{i} Note: Formatting markup can usually be nested/grouped, but the order it is used in may affect whether it works as desired.  Try using multiple formatting tags in a different order or check the help if you have trouble.

==== Bold ====
 '''Bold'''
* Place three apostrophes surrounding text to be bolded, without a space between markup and text.
  ''Example'': ```'''bold text'''``` generates '''bold text'''
==== Italics ====
 ''Italics''
* Place two apostrophes surrounding text to be italicized, without a space between markup and text.
  ''Example'': ```''italics text''``` generates ''italics text''
==== Monospace ====
 <code>Monospace</code>
* Place a backtick on either side of the text, without a space between markup and text.  (Note: This may resemble inline code (see below) in many cases, but will not behave the same.)
  ''Example'': ```<code>monospace text</code>``` generates <code>monospace text</code>
==== Code ====
 ```Code (or Verbatim Text)```
* Use three curly brackets surrounding text to be rendered as code.
* Place the brackets inline with the text to display the code formatting inline. 
   ''Example'': ```{
{{{Verbatim text as it should be typed, or appear as code or with markup. If it is too long for the line it will not wrap.```
}}}}
    ''generates''
   ```Verbatim text as it should be typed, or appear as code or with markup. If it is too long for the line it will not wrap.```
* Place the brackets above and below the text to display the code formatting inside a box.
   ''Example'': ```{
{{{
Verbatim text as it should be typed, or appear as code or with markup. This will word wrap if it is too long for one line.
```
}}}}
    ''generates''
   ```
Verbatim text as it should be typed, or appear as code or with markup. This will word wrap if it is too long for one line.
```
==== Colored Text ====
 <<Color2(red,C)>><<Color2(orange,o)>><<Color2(yellow,l)>><<Color2(green,o)>><<Color2(blue,r)>><<Color2(indigo,e)>><<Color2(violet,d)>> <<Color2(brown,T)>><<Color2(pink,e)>><<Color2(grey,x)>><<Color2(purple,t)>>

  We have the Color2 macro installed. It will colorize text outside of tables using the following syntax:<br/>
   ```<<Color2(colorname,text to be colorized)>>```<br/>
* ```colorname``` may be most any simple color name like blue or red or green
* If ```text to be colorized``` must contain commas each section must be colorized separately.  Place the comma at the end of each string and the space after between colorized sections to accomplish this.
: ''Example'': 
: ''Correct'' 
     ```
<<Color2(purple,A sentence that contains commas,)>> <<Color2(purple,such as this one,)>> <<Color2(purple,must be broken into parts or the text before the first comma will not appear when parsed.)>>
```
      ''generates''
: <<Color2(purple,A sentence that contains commas,)>> <<Color2(purple,such as this one,)>> <<Color2(purple,must be broken into parts or the text before the first comma will not appear when parsed.)>>
: ''Incorrect'' (note that the beginning of the sentence is missing)
     ```
<<Color2(purple,A sentence that contains commas, such as this one, must be broken into parts or the text before the first comma will not appear when parsed.)>>
```
      ''generates''
: <<Color2(purple,A sentence that contains commas, such as this one, must be broken into parts or the text before the first comma will not appear when parsed.)>>

  The Color2 macro will work within a table also!  However, there are other options for colorizing text (and backgrounds) in tables.  See [[#tables|Tables]] below for more info.

  <!> Please use colored text sparingly if at all. As a general convention we use <<Color2(blue,blue)>> to represent links (whether they actually behave as links or not), so please reserve that color for such purposes.  


 More wiki markup for text formatting can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnFormatting HelpOnFormatting].

[[#ToC|Return to Table of Contents]]


<span id="hyperlinks"></span>
=== Hyperlinks ===
 Although this wiki automatically creates some hyperlinks, in most cases for the SDL functions, enumerations, and structures it is unable to interpret the text correctly so it is important that you manually hyperlink these.  
* A hyperlink to another page (especially within the wiki) is created, in most cases, by enclosing the text to be linked in double brackets:<br/> ```[[linktarget]]```
: ''Example'':  Typing ```SDL_VideoInit``` will produce SDL_VideoInit, an incomplete hyperlink, because only the CamelCase portion of the name is automatically recognized by the wiki as a hyperlink.  You will need to type {{{[[SDL_VideoInit]]}}} to include the SDL_ in the link ([[SDL_VideoInit]]).
* If a hyperlink is automatically created where you __don't__ want one, adding 2 backticks (```<code></code>```) to interrupt the linked phrase or an exclamation mark ({{{!}}}) at the beginning of the incorrect link will usually remove the automatic link without appearing in the displayed text.
: ''Example'':  If typed verbatim, the data field ```BitsPerPixel``` is automatically linked, as shown here (BitsPerPixel).  This is pointless because individual data fields will not have their own pages, making this a useless, dead link.  Typing {{{Bits<code></code>Per<code></code>Pixel}}}  or {{{!BitsPerPixel}}} will prevent it from becoming a link, as shown here (Bits<code></code>Per<code></code>Pixel).
* A hyperlink to an anchor (or any unique text on a page) is created, in most cases, by<br/>
   ```[[#anchorname|description]]```<br/>
   where ```anchorname``` is a previously created [[#anchors|anchor]] or a unique bit of text on the page (but not a header) and {{{description}}} is the text that will actually appear as the link.<br/>
  ''Example'': ```[[#hyperlinks|how to hyperlink]]``` creates [[#hyperlinks|how to hyperlink]] (try clicking the link to see it in action)
* A hyperlink to an outside web or email address may be created by simply typing or pasting in the address.
* To create a link with link text other than the address itself, enclose the address followed by a pipe and the alternate link text in double brackets.  
   ''Example'': ```[[link address|alternate text]]``` produces [[link address|alternate text]]
*Any link referencing the header files should replace the version number (12-digit alpha-numeric code) with <code>tip</code> in the address if the link should be to the most current version rather than to a specific version of the header file.

 More wiki markup for tables can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnLinking HelpOnLinking]

[[#ToC|Return to Table of Contents]]


<span id="anchors"></span>
==== Anchors ====
 ```<span id="anchorname"></span>```<br/>
* Place the above markup in the location where you wish to create an anchor, replacing ```anchorname``` with a word (or phrase) that has meaning in that application.
: ''Example'': ```<span id="hyperlinks"></span>``` would create an anchor called hyperlinks that would be located at the beginning of a section related to hyperlinks.<br/>
 More (but not much) wiki markup for anchors can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnLinking HelpOnLinking] and [http://wiki.libsdl.org/moin.cgi/HelpOnMacros HelpOnMacros].

[[#ToC|Return to Table of Contents]]



<span id="tables"></span>
=== Tables ===
 Two pipes (||) are used to begin and end a table row, with two pipes separating each cell in between.
* It is important that there are no blank spaces or other characters after the closing pipes on a line.
  ''Example'': 
  ```
||row 1 column 1||row 1 column 2||row 1 column 3||
||row 2 column 1||row 2 column 2||row 2 column 3||
```
  ''Generates'':
  ||row 1 column 1||row 1 column 2||row 1 column 3||
  ||row 2 column1||row 2 column 2||row 2 column 3||

 To add color within a table use the following markup:
  ||<code><style="color: #FF0000;"></code>||set text color||
  ||<code><bgcolor="#XXXXXX"></code>||set cell background color||
  ||<code><rowbgcolor="#XXXXXX"></code>||set row background color (only valid in first cell)||
  ||<code><tablebgcolor="#XXXXXX"></code>||set table background color||

 More wiki markup for tables can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnTables HelpOnTables]

[[#ToC|Return to Table of Contents]]


<span id="headers"></span>
=== Headers ===
 Use one to five equals signs (=) surrounding header text, with a space between markup and text.
* One equals sign is the highest level header (largest)
: ''Example'': = Title =<br/>
* Five equals signs is the lowest level header (smallest) 
: ''Example'': ===== Minor =====<br/>
 ''Example'': ```=== Some Wiki Markup Basics ===```<br/>
 Headers will appear in an automatically generated [[#ToC|Table of Contents]].
: More (but not much) wiki markup for headers can be found at [http://wiki.libsdl.org/moin.cgi/HelpOnHeadlines HelpOnHeadlines].

[[#ToC|Return to Table of Contents]]


<span id="include"></span>
=== Includes ===
 An include enables you to copy all or a portion of a page onto another page, allowing changes to one page to be automatically updated on another.  This is especially useful for listing enumeration values for a function parameter on the function page, for example.<br/>
 To create an Include place the following markup in the location where you wish the data to begin on the recipient page.
  For copying values from an enumeration:<br/>
  ```
<<Include(SDL_Enumeration, , , from="== Values ==", to="== Code Examples ==")>>
```
   where ```SDL_Enumeration``` is replaced by the Enumeration's name.<br/>
  For copying data fields from a structure:<br/>
  ```
<<Include(SDL_Structure, , , from="== Data Fields ==", to="== Code Examples ==")>>
```
   where ```SDL_Structure``` is replaced by the Structure's name.<br/>
  The basic format is ```
<<Include(pagename, heading, level, from="regex", to="regex", sort=ascending|descending, items=n, skipitems=n, titlesonly, editlink)>>
```
   See [http://wiki.libsdl.org/moin.cgi/HelpOnMacros/Include HelpOnMacros/Include] for details if a different include becomes necessary.
  {i} The <code>from=</code> and <code>to=</code> start markers are very literal!  They will include ''everything'' following the end of the start marker and up to but not including the beginning of the end marker.  (This is why the header markup is included in the above statements.)  When creating an Include statement choose <code>from=</code> and <code>to=</code> parameters carefully.

[[#ToC|Return to Table of Contents]]


<!-- #To include an embedded ToC (eg: <<TableOfContents(3)>>) use standard ToC syntax but include comma-separated values to limit heading levels that are listed instead of empty parens.  First # is highest level, 2nd number is lowest level to include. ie: 2,4 includes levels 2-4. -->


------



== Miscellaneous Notes ==

=== Style Guide Terminology ===
Some terms used in the style guides are intended to have specific meanings or purposes that may or may not be as intuitively clear as we hope.  Explanations are provided here to avoid any potential confusion.
<span id="api"></span>
: '''API Page'''
: Refers to any Function, Structure, or Enumeration page.
<span id="category"></span>
: '''Category Page'''
: Refers to the front page of each major category found in the [http://wiki.libsdl.org/moin.cgi/APIByCategory API by Category] list.
: '''''If...'''''
: Found at the beginning of detailed style guide sections, this indicates options for you to choose from.  Select the one(s) that best suit your content given the context on the page you are editing and follow the related instructions. (See ''Action'' through ''Example'' below.)  
: In some cases a portion of the statement following ''If'' will be __underlined__ to help you quickly scan for the option(s) that you need.
: '''''Action'':'''
: The instructions immediately following ''Action'' indicate what you should do to apply the style guide guidelines.  In some cases you will select an ''Action'' that is relevant to your particular content (usually from a table of options).  In many cases everyone making a certain type of edit should follow the same ''Action'' in which case no options will be given.
: ''Action'' is almost always followed by ''Markup'' or ''How'' and may also be followed by any of the other markers (see below).
: /!\ Please read any ''Note'' or ''<<Color2(red,Important!)>>'' comment related to the ''Action''(s) you choose.  If you are otherwise familiar with the wiki and it's markup the other sections can usually be skipped.
: '''''Markup'':'''
: The instructions immediately following ''Markup'' indicate the critical markup that would be used in the text editor to complete the ''Action'' above it.  If you prefer another way to achieve the same result, or prefer to use the GUI editor this information should be used to clarify the correct formatting for you to match.
: '''''How'':'''
: Usually used instead of ''Markup'', the information immediately following ''How'' describes specific actions to be taken outside of the editing window in order to complete the ''Action'' above it.
: '''''Note'':'''
: The instructions immediately following ''Note'': should be taken into consideration as necessary.  
: '''''<<Color2(red,Important!)>>'''''
: Similar to a ''Note'', but indicates that the noted information is especially important and should be heeded by all Contributors. 
: '''''Example'':'''
: Points to a place in the wiki where the related ''Action'' and ''Markup'' can be observed.
<br/>
<br/>
=== Other Help ===
Some other wiki help that might be of interest or helpful to find quickly:
:[http://wiki.libsdl.org/moin.cgi/HelpIndex HelpIndex]
:[http://wiki.libsdl.org/moin.cgi/HelpOnFormatting HelpOnFormatting]
:[http://wiki.libsdl.org/moin.cgi/HelpOnEditing HelpOnEditing]
:[http://wiki.libsdl.org/moin.cgi/HelpOnSmileys HelpOnSmileys]
:[http://wiki.libsdl.org/moin.cgi/HelpOnAdmonitions HelpOnAdmonitions]


[[#ToC|Return to Table of Contents]]


<!-- #This is a test of the hidden comment system.  This is only a test.  An include begins here.  It is used on all other SG pages.  Please note that any change between this note and the next will be reflected on every SG page as well.  Consider edits carefully. -->
----
== Resources ==

Our goal is to create accurate, consistent, helpful, user-friendly documentation.  We appreciate your efforts to make your additions fit into the existing framework and retain the same look and feel as much 
as possible.

If you have questions that aren't addressed here:
 a. Search for another page that contains something similar to what you want to do and copy all the basics as much as applicable.  
 a. Check the other SDL [http://wiki.libsdl.org/moin.cgi/Contributing#guides Style Guides].
 a. Post a question to [http://wiki.libsdl.org/moin.cgi/Contributing#form Feedback] and 
include a way to contact you.
 a. Post a question to the [http://wiki.libsdl.org/moin.cgi/Contributing#list Mailing List]
 a. Send a comment or question to <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>> for clarification.

If you have suggestions for changes or additions to this document or any other portion of the wiki please don't hesitate to contact us with your thoughts.  We are happy to have the participation!

------
== Disclaimer ==
```#!wiki note
All content modifications are subject to review for consistency and quality.  We reserve the right to remove or modify any content added to this wiki at any time.  You may direct questions or concerns to <<MailTo(ANTI SPAM wiki AT libsdl DOT org)>>.
```
<!-- #This concludes the test of the hidden comment system.  This was only a test.  The include which began just above Resources concludes here.  Note that this include is applied on every other SG page and should be edited carefully with that in mind. -->
