= SDL_GetMemoryFunctions =

#ifndef DOXYGEN_SHOULD_IGNORE_THIS #if !defined(__ANDROID__) && !defined(__VITA__) /'' TODO: include/[[SDL_stdinc]].h:174: error: size of array '[[SDL_dummy_enum]]' is negative ''/ typedef enum { DUMMY_ENUM_VALUE } [[SDL_DUMMY_ENUM]]; 

== Syntax ==

<syntaxhighlight lang='c'>
void SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,
                            SDL_calloc_func *calloc_func,
                            SDL_realloc_func *realloc_func,
                            SDL_free_func *free_func);
</syntaxhighlight>

== Remarks ==

[[SDL_COMPILE_TIME_ASSERT]](enum, sizeof([[SDL_DUMMY_ENUM]]) ==
sizeof(int)); #endif #endif /'' DOXYGEN_SHOULD_IGNORE_THIS ''/ /'''
\endcond ''/

#include "begin_code.h" /'' Set up for C function definitions, even when
using C++ ''/ #ifdef __cplusplus extern "C" { #endif

#ifdef HAVE_ALLOCA #define [[SDL_stack_alloc]](type, count)
(type'')alloca(sizeof(type)''(count)) #define [[SDL_stack_free]](data)
#else #define [[SDL_stack_alloc]](type, count)
(type'')[[SDL_malloc]](sizeof(type)''(count)) #define
[[SDL_stack_free]](data) [[SDL_free]](data) #endif

extern DECLSPEC void ''SDLCALL [[SDL_malloc]](size_t size); extern DECLSPEC
void ''SDLCALL [[SDL_calloc]](size_t nmemb, size_t size); extern DECLSPEC
void ''SDLCALL [[SDL_realloc]](void ''mem, size_t size); extern DECLSPEC
void SDLCALL [[SDL_free]](void ''mem);

typedef void ''(SDLCALL ''[[SDL_malloc_func]])(size_t size); typedef void
''(SDLCALL ''[[SDL_calloc_func]])(size_t nmemb, size_t size); typedef void
''(SDLCALL ''[[SDL_realloc_func]])(void ''mem, size_t size); typedef void
(SDLCALL ''[[SDL_free_func]])(void *mem);

/'''


