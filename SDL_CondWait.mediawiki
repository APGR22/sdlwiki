<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_CondWait =
Use this function to wait on the condition variable, unlocking the provided mutex.  <<Color2(green, Alternate:  ...unlock the provided mutex and wait on the condition variable.)>>

<<Color2(green,I expect that this works on the current thread or the one that it is called from within.  Is that correct?  Is there any need to specify any of this here?)>>


== Syntax ==
```c++
int SDL_CondWait(SDL_cond*  cond,
                 SDL_mutex* mutex)
```

== Function Parameters ==
{|
|'''cond'''
|^the applicable condition variable^ ???
|-
|'''mutex'''
|^the mutex to unlock^
|}

== Return Value ==
Returns 0 when it is signaled or a negative error code on failure; call [[SDL_GetError]]() for more information.

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
The mutex must be locked before entering this function!  The mutex is re-locked once the condition variable is signaled *^by^ another thread call^ing^ [[SDL_CondSignal]]() or [[SDL_CondBroadcast]]() on the condition variable '''cond'''.*

<<Color2(green,Alternate version:)>>
The mutex must be locked before entering this function!  <<Color2(green,This line may be moved to the end instead.)>>

This function unlocks the specified '''mutex''' and waits on another thread to call [[SDL_CondSignal]]() or [[SDL_CondBroadcast]]() on the condition variable '''cond'''.  The mutex is re-locked once the condition variable is signaled.

== Related Functions ==
:[[SDL_CondSignal]] *
:[[SDL_CondWaitTimeout]] *
:[[SDL_mutexP]] *

----
[[CategoryAPI]], [[CategoryMutex]]
