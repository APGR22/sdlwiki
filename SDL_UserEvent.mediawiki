<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_UserEvent =
A structure that contains a user-defined event type (event.user.*).


== Data Fields ==
{|
|Uint32
|'''type'''
|SDL_USEREVENT through SDL_NUMEVENTS-1
|-
|Uint32
|'''windowID'''
|the associated window, if any
|-
|int
|'''code'''
|user defined event code
|-
|void*
|'''data1'''
|user defined data pointer
|-
|void*
|'''data2'''
|user defined data pointer
|}

== Code Examples ==
*<br/>
```c++
SDL_Event event;

event.type = SDL_USEREVENT;
event.user.code = my_event_code;
event.user.data1 = significant_data;
event.user.data2 = 0;
SDL_PushEvent(&event);
```<<BR>>*
<<Color2(green,Does this example need the '''windowID''' param added?)>>

== Remarks ==
*<br/>[[SDL_UserEvent]] is in the '''user''' member of the ,,structure,, [[SDL_Event]]()??? ^union^. This event is unique; it is never created by SDL but only by the user. The event can be pushed onto the event queue using [[SDL_PushEvent]](). The contents of the structure members <<Color2(green,(SDL_UserEvent or SDL_Event?  Unclear.)>> are completely up to the programmer, <<Color2(green,not sure of the comma here. Consider ; . -)>> the only requirement is that '''type''' is a value from SDL_USEREVENT to SDL_NUMEVENTS-1 (inclusive). <br/>*

== Related Enumerations ==
:[[SDL_EventType]]???

== Related Functions ==
:[[SDL_PushEvent]] *

----
[[CategoryStruct]]
