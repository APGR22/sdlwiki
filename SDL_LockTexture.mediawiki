<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->

= SDL_LockTexture =
Use this function to lock a portion of the texture for pixel access.


== Syntax ==
```c++
int SDL_LockTexture(SDL_TextureID    textureID,
                    const SDL_Rect*  rect,
                    int              markDirty,
                    void**           pixels,
                    int*             pitch)
```

== Function Parameters ==
{|
|'''textureID'''
|The texture to lock for access, which was created with SDL_TEXTUREACCESS_STREAMING.
|-
|'''rect'''
|A pointer to the rectangle to lock for access. If the rect is NULL, the entire texture will be locked.
|-
|'''markDirty'''
|If this is nonzero, the locked area will be marked dirty when the texture is unlocked.
|-
|'''pixels'''
|This is filled in with a pointer to the locked pixels, appropriately offset by the locked area.
|-
|'''pitch'''
|This is filled in with the pitch of the locked pixels.
|}

== Return Value ==
0 on success, or a negative error code if the texture is not valid or was created with SDL_TEXTUREACCESS_STATIC; call [[SDL_GetError]]() for more information.

== Code Examples ==
```c++
You can add your code example here
```

== Remarks ==
If you don't want to mark the entire area dirty you can pass 0 for '''markDirty''' and then use [[SDL_DirtyTexture]]() to mark specific subareas dirty.

== Related Functions ==
:[[SDL_DirtyTexture]]
:[[SDL_UnlockTexture]]
