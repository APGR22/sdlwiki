<!-- pragma section-numbers off -->
<!-- pragma disable-camelcase -->
'''DRAFT'''

= SDL_CreateCond =
Use this function to create a condition variable.


== Syntax ==
```c++
SDL_cond* SDL_CreateCond(void)
```

== Return Value ==
Returns ^the condition variable that is created^.

== Code Examples ==
*
```c++
SDL_cond *cond;

cond=SDL_CreateCond();
.
.
/* Do stuff */
.
.
SDL_DestroyCond(cond);
```
*<br/>

<!-- Should this example be Included on the SDL_DestroyCond page? -->

== Remarks ==
Typical use of condition variables:
 ```
Thread A:
    SDL_LockMutex(lock);
    while ( ! condition ) {
        SDL_CondWait(cond, lock);
    }
    SDL_UnlockMutex(lock);

Thread B:
    SDL_LockMutex(lock);
    ...
    condition = true;
    ...
    SDL_CondSignal(cond);
    SDL_UnlockMutex(lock);
```
There is some discussion whether to signal the condition variable with the mutex locked or not.  There is some potential performance benefit to unlocking first on some platforms, but there are some potential race conditions depending on how your code is structured.

In general it's safer to signal the condition variable while the mutex is locked.


<!-- Since this has no params does it actually ''create'' the structure or does it just assign an existing structure to a thread? -->

== Related Functions ==
:[[SDL_CondSignal]] *
:[[SDL_CondWait]] *
:[[SDL_DestroyCond]] *

----
[[CategoryAPI]], [[CategoryMutex]]
